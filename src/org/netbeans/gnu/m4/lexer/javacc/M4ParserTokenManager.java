/* Generated By:JavaCC: Do not edit this line. M4ParserTokenManager.java */
package org.netbeans.gnu.m4.lexer.javacc;

/** Token Manager. */
public class M4ParserTokenManager implements M4ParserConstants
{
  int m4NestingDepth;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x9000000000000000L) != 0L || (active1 & 0x4402819103000L) != 0L)
         {
            jjmatchedKind = 133;
            return 11;
         }
         if ((active0 & 0x800L) != 0L)
            return 23;
         if ((active0 & 0x6000000000000000L) != 0L || (active1 & 0xfffbbfd7e6efcfffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            return 76;
         }
         if ((active0 & 0x10000000040000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 1;
            }
            return 76;
         }
         return -1;
      case 2:
         if ((active1 & 0x40008000000000L) != 0L)
            return 76;
         if ((active0 & 0xf000000000000000L) != 0L || (active1 & 0xffbfff7fffffffffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 2;
            return 76;
         }
         return -1;
      case 3:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0xe000000404700L) != 0L)
            return 76;
         if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0xffb1ff7fffbfb8ffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 3;
            }
            return 76;
         }
         return -1;
      case 4:
         if ((active0 & 0x2000000000000000L) != 0L || (active1 & 0x10000200854L) != 0L)
            return 76;
         if ((active0 & 0x5000000000000000L) != 0L || (active1 & 0xffb1fe7fff9fb4abL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 4;
            return 76;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000000000000000L) != 0L || (active1 & 0x1401262900903022L) != 0L || (active2 & 0x8L) != 0L)
            return 76;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xebb0d856ff0f8489L) != 0L || (active2 & 0x17L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 5;
            }
            return 76;
         }
         return -1;
      case 6:
         if ((active1 & 0x2a30000203038489L) != 0L)
            return 76;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xc180d854fc1c2000L) != 0L || (active2 & 0x17L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 133;
               jjmatchedPos = 6;
            }
            return 76;
         }
         return -1;
      case 7:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0xc080581404020000L) != 0L || (active2 & 0x3L) != 0L)
            return 76;
         if ((active1 & 0x1008040f81c2000L) != 0L || (active2 & 0x14L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 7;
            return 76;
         }
         return -1;
      case 8:
         if ((active1 & 0x58000000L) != 0L)
            return 76;
         if ((active1 & 0x1008040a01c2000L) != 0L || (active2 & 0x14L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 8;
            return 76;
         }
         return -1;
      case 9:
         if ((active1 & 0x800080002000L) != 0L)
            return 76;
         if ((active1 & 0x1000040201c0000L) != 0L || (active2 & 0x14L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 9;
            return 76;
         }
         return -1;
      case 10:
         if ((active1 & 0x100004020000000L) != 0L || (active2 & 0x14L) != 0L)
            return 76;
         if ((active1 & 0x1c0000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 10;
            return 76;
         }
         return -1;
      case 11:
         if ((active1 & 0x100000L) != 0L)
            return 76;
         if ((active1 & 0xc0000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 11;
            return 76;
         }
         return -1;
      case 12:
         if ((active1 & 0xc0000L) != 0L)
            return 76;
         return -1;
      case 13:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 13;
            return 76;
         }
         return -1;
      case 14:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 14;
            return 76;
         }
         return -1;
      case 15:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 15;
            return 76;
         }
         return -1;
      case 16:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 133;
            jjmatchedPos = 16;
            return 76;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 21;
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x400040000000L, 0x0L, 0x0L);
      case 39:
         return jjStartNfaWithStates_0(0, 11, 23);
      case 40:
         return jjStopAtPos(0, 12);
      case 41:
         return jjStopAtPos(0, 13);
      case 42:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x100000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x40080000000L, 0x0L, 0x0L);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         jjmatchedKind = 34;
         return jjMoveStringLiteralDfa1_0(0x80100000000L, 0x0L, 0x0L);
      case 46:
         jjmatchedKind = 18;
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x0L, 0x0L);
      case 47:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L, 0x0L);
      case 58:
         return jjStopAtPos(0, 24);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         jjmatchedKind = 20;
         return jjMoveStringLiteralDfa1_0(0x4020004000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x8000008000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 23);
      case 64:
         return jjMoveStringLiteralDfa1_0(0xfe0000000000000L, 0x0L, 0x0L);
      case 91:
         return jjStopAtPos(0, 4);
      case 93:
         return jjStopAtPos(0, 7);
      case 94:
         jjmatchedKind = 39;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x0L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1b0000000000000L, 0x7L);
      case 96:
         return jjStopAtPos(0, 8);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8040e0600100L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x9000000000000000L, 0x4402819103000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8808000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000038000L, 0x10L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2010200000034L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x600L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000100000000L, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000003L, 0x0L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000800080L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x14000404000c0040L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80006000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x201000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 14);
      case 124:
         jjmatchedKind = 38;
         return jjMoveStringLiteralDfa1_0(0x800020000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 15);
      case 126:
         return jjStopAtPos(0, 22);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L, active2, 0L);
      case 38:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 43:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 45:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 32);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L, active2, 0L);
      case 52:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000L, active2, 0x8L);
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0x440000000000000L, active1, 0L, active2, 0L);
      case 60:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(1, 44);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000000000L, active1, 0L, active2, 0L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1b0000000000000L, active2, 0x7L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0x4000900000000000L, active2, 0x10L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000000000000000L, active1, 0x4028018900080L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe0000040L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200002c00000000L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x2011200000004L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000438702L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000080006004000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x840000000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40001200809L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8000000000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1400000000000000L, active2, 0L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0L, active2, 0L);
      case 124:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 29);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(2, 52);
         break;
      case 50:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 76);
         break;
      case 58:
         return jjMoveStringLiteralDfa3_0(active0, 0x320000000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(2, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 51);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80800e60c0000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40018000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x6200200000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0x11000000014L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000020L, active2, 0x8L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x9000000000000000L, active1, 0x100000L, active2, 0x1L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10020000004000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x648L, active2, 0L);
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 110:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 76);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000400800100L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000000800L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000400002L, active2, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0x8001000000238000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x3400000000000001L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000000L, active1, 0x100000000000L, active2, 0x10L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000003000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2800000080L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100400100000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800000000000000L, active2, 0L);
      case 124:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 125:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 64:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 59);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x204000800000L, active2, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4000004060c0000L, active2, 0L);
      case 100:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000002L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0x4000030800030090L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000000L, active1, 0x100801000100004L, active2, 0x3L);
      case 108:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 115, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200008028L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 76);
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x904820e0000400L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x3000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000001000000L, active2, 0L);
      case 114:
         if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 113, 76);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 114, 76);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100200000L, active2, 0x4L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x820140000000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000000800L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x18000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x8L);
      case 121:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 86, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1001000100030400L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800400000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000001L, active2, 0L);
      case 101:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 75, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000006000002L, active2, 0L);
      case 102:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000000000L, active1, 0L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xf8000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x80000000000000L, active2, 0x8L);
      case 107:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc0000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000L, active2, 0x11L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000000800000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0x100000000100000L, active2, 0x2L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000008000L, active2, 0x4L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 66, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000004800000080L, active2, 0L);
      case 115:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 61, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x280000000020L, active2, 0L);
      case 116:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000840000003008L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10102200000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000L, active2, 0L);
      case 120:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 76);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 121:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x300000000c0000L, active2, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc00000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x30000L, active2, 0L);
      case 100:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100004200000000L, active2, 0L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 76);
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 76);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 109, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000010e1102001L, active2, 0x3L);
      case 102:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0x8000000000000008L, active2, 0L);
      case 108:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000400L, active2, 0L);
      case 109:
         if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 76);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2800000008000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x6008000L, active2, 0L);
      case 112:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 76);
         else if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 105, 76);
         break;
      case 114:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 76);
         break;
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L, active2, 0L);
      case 116:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 76);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 112, 76);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(5, 131, 76);
         break;
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 116, 76);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000102000L, active2, 0x3L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 100:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000L, active2, 0L);
      case 101:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 71, 76);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 97, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 102:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(6, 64, 76);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 88, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40c0000L, active2, 0L);
      case 104:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x84010000000L, active2, 0L);
      case 108:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000000L, active2, 0L);
      case 110:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 67, 76);
         else if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 89, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0x8000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000008000000L, active2, 0L);
      case 112:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 76);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 76);
         break;
      case 113:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000L, active2, 0x4L);
      case 115:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 121, 76);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x500000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 119, 76);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 128, 76);
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 76);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x4L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000L, active2, 0L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 62, 76);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 98, 76);
         else if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 110, 76);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000L, active2, 0L);
      case 102:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(7, 90, 76);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00c0000L, active2, 0L);
      case 112:
         if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 126, 76);
         break;
      case 113:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(7, 81, 76);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0L, active2, 0x10L);
      case 116:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 100, 76);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 76);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 108, 76);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 76);
         break;
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x4000000000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, active2);
      return 8;
   }
   switch(curChar)
   {
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 76);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(8, 92, 76);
         return jjMoveStringLiteralDfa9_0(active1, 0x4000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active1, 0x102000L, active2, 0L);
      case 109:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(8, 94, 76);
         return jjMoveStringLiteralDfa9_0(active1, 0L, active2, 0x4L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active1, 0x20000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x800c0000L, active2, 0x10L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active1, 0x100000000000000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa9_0(active1, 0x800000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa9_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(7, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, active2);
      return 9;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa10_0(active1, 0x100000000000000L, active2, 0x4L);
      case 100:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 95, 76);
         break;
      case 101:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 111, 76);
         return jjMoveStringLiteralDfa10_0(active1, 0xc0000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active1, 0x100000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active1, 0L, active2, 0x10L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active1, 0x4000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(9, 77, 76);
         return jjMoveStringLiteralDfa10_0(active1, 0x20000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(8, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, active2);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 120, 76);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(10, 130, 76);
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active1, 0xc0000L, active2, 0L);
      case 101:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(10, 93, 76);
         break;
      case 110:
         return jjMoveStringLiteralDfa11_0(active1, 0x100000L, active2, 0L);
      case 114:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(10, 132, 76);
         break;
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 102, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, active2);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1, long old2, long active2)
{
   if (((active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(9, 0L, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa12_0(active1, 0xc0000L);
      case 100:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(11, 84, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 104:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa14_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa15_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa16_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa17_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(15, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 111:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(17, 83, 76);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 76;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 40)
                  {
                     if (kind > 135)
                        kind = 135;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(56);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 35)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(15, 19);
                  }
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  else if (curChar == 40)
                  {
                     if (kind > 135)
                        kind = 135;
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(56);
                  }
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(12, 14);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 9:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(23, 25);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 24:
                  if (curChar == 39 && kind > 145)
                     kind = 145;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 24);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if (curChar == 34 && kind > 146)
                     kind = 146;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 43:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(44, 21);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 46);
                  break;
               case 47:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(48, 21);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(49, 50);
                  break;
               case 50:
                  if (curChar != 46)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(33, 35);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(33, 35);
                  break;
               case 53:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(54, 21);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 40 && kind > 135)
                     kind = 135;
                  break;
               case 59:
                  if (curChar != 48)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(15, 19);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(61, 15);
                  break;
               case 62:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(62, 15);
                  break;
               case 64:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 65:
                  if (curChar == 46)
                     jjCheckNAdd(66);
                  break;
               case 66:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(66, 67);
                  break;
               case 68:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(69, 21);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 72:
                  if (curChar == 46)
                     jjCheckNAdd(73);
                  break;
               case 74:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddTwoStates(75, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  else if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 76:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(56);
                  }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAddStates(44, 46);
                  }
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 133)
                        kind = 133;
                     jjCheckNAdd(56);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(12, 14);
                  break;
               case 6:
                  if (curChar != 108)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 7:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 12:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 136)
                     kind = 136;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(47, 48);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 140)
                     kind = 140;
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(41, 43);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(49, 51);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 42:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(52, 53);
                  break;
               case 46:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(54, 55);
                  break;
               case 52:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(56, 57);
                  break;
               case 55:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAddStates(44, 46);
                  break;
               case 56:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 133)
                     kind = 133;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 60:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddTwoStates(61, 15);
                  break;
               case 63:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(58, 59);
                  break;
               case 67:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 70:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(71);
                  break;
               case 71:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 73:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(12, 14);
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 76 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 39:
         return jjStopAtPos(0, 10);
      case 64:
         return jjMoveStringLiteralDfa1_1(0xfe0000000000000L);
      case 91:
         return jjStopAtPos(0, 5);
      case 93:
         return jjStopAtPos(0, 6);
      case 96:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_1(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_1(active0, 0x100000000000000L);
      case 38:
         return jjMoveStringLiteralDfa2_1(active0, 0x800000000000000L);
      case 58:
         return jjMoveStringLiteralDfa2_1(active0, 0x440000000000000L);
      case 60:
         return jjMoveStringLiteralDfa2_1(active0, 0x20000000000000L);
      case 83:
         return jjMoveStringLiteralDfa2_1(active0, 0x80000000000000L);
      case 123:
         return jjMoveStringLiteralDfa2_1(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(0, active0);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 58:
         return jjMoveStringLiteralDfa3_1(active0, 0x320000000000000L);
      case 62:
         return jjMoveStringLiteralDfa3_1(active0, 0x40000000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_1(active0, 0x800000000000000L);
      case 124:
         return jjMoveStringLiteralDfa3_1(active0, 0x80000000000000L);
      case 125:
         return jjMoveStringLiteralDfa3_1(active0, 0x400000000000000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 64:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(3, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(3, 54);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(3, 55);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(3, 56);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(3, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(3, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_1(2, active0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(64, 66);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(67, 68);
                  break;
               case 9:
                  if (curChar == 40 && kind > 135)
                     kind = 135;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar != 108)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(64, 66);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(64, 66);
                  break;
               case 5:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 7:
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(64, 66);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   41, 42, 21, 45, 46, 49, 50, 32, 33, 35, 23, 25, 2, 3, 5, 60, 
   62, 15, 63, 70, 7, 8, 10, 17, 18, 21, 32, 33, 37, 35, 41, 42, 
   21, 51, 52, 21, 64, 65, 71, 72, 73, 26, 27, 29, 56, 57, 58, 19, 
   20, 34, 36, 38, 43, 44, 47, 48, 53, 54, 66, 67, 68, 69, 74, 75, 
   1, 2, 4, 8, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\133", "\133", "\135", "\135", "\140", "\140", "\47", 
"\47", "\50", "\51", "\173", "\175", "\73", "\54", "\56", "\75", "\74", "\41", 
"\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", "\174\174", "\46\46", 
"\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", "\136", "\45", "\74\74", 
"\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", "\136\75", "\45\75", 
"\74\74\75", "\76\76\75", "\56\56\56", "\100\74\72\100", "\100\72\76\100", 
"\100\123\174\100", "\100\45\72\100", "\100\173\72\100", "\100\72\175\100", "\100\46\164\100", 
"\144\145\146\151\156\145", "\156\141\162\147\163", "\165\156\144\145\146\151\156\145", 
"\144\145\146\156", "\160\165\163\150\144\145\146", "\160\157\160\144\145\146", 
"\151\156\144\151\162", "\142\165\151\154\164\151\156", "\151\146\144\145\146", 
"\151\146\145\154\163\145", "\163\150\151\146\164", "\162\145\166\145\162\163\145", "\143\157\156\144", 
"\152\157\151\156", "\152\157\151\156\141\154\154", "\161\165\157\164\145", 
"\144\161\165\157\164\145", "\144\161\165\157\164\145\137\145\154\164", "\141\162\147\156", 
"\146\157\162\154\157\157\160", "\146\157\162\145\141\143\150", "\146\157\162\145\141\143\150\161", 
"\163\164\141\143\153\137\146\157\162\145\141\143\150", "\163\164\141\143\153\137\146\157\162\145\141\143\150\137\154\151\146\157", 
"\144\145\146\151\156\145\137\142\154\151\156\144", "\143\165\162\162\171", "\143\157\160\171", "\162\145\156\141\155\145", 
"\144\165\155\160\144\145\146", "\164\162\141\143\145\157\156", "\164\162\141\143\145\157\146\146", 
"\144\145\142\165\147\155\157\144\145", "\144\145\142\165\147\146\151\154\145", 
"\143\150\141\156\147\145\161\165\157\164\145", "\143\150\141\156\147\145\143\157\155", 
"\143\150\141\156\147\145\167\157\162\144", "\155\64\167\162\141\160", "\151\156\143\154\165\144\145", 
"\163\151\156\143\154\165\144\145", "\144\151\166\145\162\164", "\165\156\144\151\166\145\162\164", 
"\144\151\166\156\165\155", "\143\154\145\141\162\144\151\166\145\162\164", "\154\145\156", 
"\151\156\144\145\170", "\162\145\147\145\170\160", "\163\165\142\163\164\162", 
"\164\162\141\156\163\154\151\164", "\160\141\164\163\165\142\163\164", "\165\160\143\141\163\145", 
"\144\157\167\156\143\141\163\145", "\143\141\160\151\164\141\154\151\172\145", "\146\157\162\155\141\164", 
"\151\156\143\162", "\144\145\143\162", "\145\166\141\154", "\137\137\147\156\165\137\137", 
"\137\137\157\163\62\137\137", "\157\163\62", "\137\137\165\156\151\170\137\137", 
"\137\137\167\151\156\144\157\167\163\137\137", "\167\151\156\144\157\167\163", "\163\171\163\143\155\144", 
"\145\163\171\163\143\155\144", "\163\171\163\166\141\154", "\155\153\163\164\145\155\160", 
"\155\141\153\145\164\145\155\160", "\145\162\162\160\162\151\156\164", "\137\137\146\151\154\145\137\137", 
"\137\137\154\151\156\145\137\137", "\137\137\160\162\157\147\162\141\155\137\137", "\155\64\145\170\151\164", 
"\146\141\164\141\154\137\145\162\162\157\162", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "MCOMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[76];
private final int[] jjstateSet = new int[152];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public M4ParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public M4ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 76; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 148)
       {
          jjmatchedKind = 148;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 147)
       {
          jjmatchedKind = 147;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
           matchedToken = jjFillToken();
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
    m4NestingDepth = 1;
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
    m4NestingDepth += 1;
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
    m4NestingDepth = 0;
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
    m4NestingDepth = 1;
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
    m4NestingDepth += 1;
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
    m4NestingDepth = 0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
