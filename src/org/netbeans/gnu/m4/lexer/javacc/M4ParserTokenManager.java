/* Generated By:JavaCC: Do not edit this line. M4ParserTokenManager.java */
package org.netbeans.gnu.m4.lexer.javacc;

/** Token Manager. */
public class M4ParserTokenManager implements M4ParserConstants
{
  int m4NestingDepth ;

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffe1f00L) != 0L)
         {
            jjmatchedKind = 101;
            return 53;
         }
         if ((active0 & 0x1e000L) != 0L)
         {
            jjmatchedKind = 101;
            return 11;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 17;
         return -1;
      case 1:
         if ((active0 & 0x189c000L) != 0L)
            return 53;
         if ((active0 & 0x1ffe763f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 1;
            }
            return 53;
         }
         return -1;
      case 2:
         if ((active0 & 0x402200000L) != 0L)
            return 53;
         if ((active0 & 0x1bfc5fbf00L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
            return 53;
         }
         return -1;
      case 3:
         if ((active0 & 0xb8c428c00L) != 0L)
            return 53;
         if ((active0 & 0x10701d3300L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
            return 53;
         }
         return -1;
      case 4:
         if ((active0 & 0x50093100L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
            return 53;
         }
         if ((active0 & 0x1020140200L) != 0L)
            return 53;
         return -1;
      case 5:
         if ((active0 & 0x50010000L) != 0L)
            return 53;
         if ((active0 & 0x83100L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
            return 53;
         }
         return -1;
      case 6:
         if ((active0 & 0x82100L) != 0L)
            return 53;
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
            return 53;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 38:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x80000000000000L, 0x80L);
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 42:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20L);
      case 43:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x8L);
      case 44:
         return jjStopAtPos(0, 42);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x10L);
      case 46:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000L);
      case 47:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 58:
         return jjStopAtPos(0, 49);
      case 59:
         return jjStopAtPos(0, 41);
      case 60:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x804L);
      case 61:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L, 0x1000L);
      case 63:
         return jjStopAtPos(0, 48);
      case 64:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc000L);
      case 91:
         return jjStopAtPos(0, 4);
      case 93:
         return jjStopAtPos(0, 7);
      case 94:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x300L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1e000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x13c0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2800000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x4000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x60000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x780000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x800000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x100L);
      case 125:
         return jjStopAtPos(0, 40);
      case 126:
         return jjStopAtPos(0, 47);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20000L);
      case 38:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000L);
      case 43:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 45:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 58:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x88000L);
      case 60:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4800L);
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x40400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x90002000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 53);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1120000800L, active1, 0L);
      case 105:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x120000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x804619100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0L);
      case 123:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000L);
      case 124:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(2, 77);
         break;
      case 58:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x64000L);
      case 61:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1840000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8040000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4089000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x20100100L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 53);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80020400L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 53);
         return jjMoveStringLiteralDfa3_0(active0, 0x10400000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200010000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 53);
         break;
      case 124:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 125:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 64:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(3, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(3, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(3, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(3, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(3, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x182200L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 53);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(3, 10, 53);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 53);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 53);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 53);
         break;
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 53);
         break;
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000100L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 53);
         break;
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 53);
         break;
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 11, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 53);
         return jjMoveStringLiteralDfa4_0(active0, 0x40001000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 53);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 53);
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 53);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 53);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 53);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 53);
         break;
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 53);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x82000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 53);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 53);
         break;
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 53);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(6, 19, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 53);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 95;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(53);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  else if (curChar == 39)
                     jjAddStates(10, 11);
                  else if (curChar == 46)
                     jjCheckNAdd(17);
                  else if (curChar == 35)
                  {
                     if (kind > 2)
                        kind = 2;
                     jjCheckNAddStates(12, 14);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(14, 15);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(15, 19);
                  }
                  break;
               case 11:
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(53);
                  break;
               case 1:
                  if (curChar != 35)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(12, 14);
                  break;
               case 2:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddStates(12, 14);
                  break;
               case 3:
                  if ((0x2400L & l) != 0L && kind > 2)
                     kind = 2;
                  break;
               case 4:
                  if (curChar == 10 && kind > 2)
                     kind = 2;
                  break;
               case 5:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 8:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 9:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 10:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 46)
                     jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(23, 25);
                  break;
               case 19:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
                  if (curChar == 39)
                     jjAddStates(10, 11);
                  break;
               case 23:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if (curChar == 39 && kind > 94)
                     kind = 94;
                  break;
               case 26:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 27:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 24);
                  break;
               case 28:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 29:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 34)
                     jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 34:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 35:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(26, 29);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 38:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(37);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 50:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 52:
                  if (curChar != 36)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 6);
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(30, 32);
                  break;
               case 57:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(58);
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(58, 21);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(62, 21);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(63, 64);
                  break;
               case 64:
                  if (curChar != 46)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(33, 35);
                  break;
               case 65:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(33, 35);
                  break;
               case 67:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(68, 21);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 76:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 78:
                  if (curChar != 48)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(15, 19);
                  break;
               case 80:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(80, 15);
                  break;
               case 81:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(81, 15);
                  break;
               case 83:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(36, 37);
                  break;
               case 84:
                  if (curChar == 46)
                     jjCheckNAdd(85);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 86);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(88, 21);
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 91:
                  if (curChar == 46)
                     jjCheckNAdd(92);
                  break;
               case 93:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(94);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(94, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(53);
                  }
                  if (curChar == 95)
                     jjAddStates(41, 42);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 45;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(53);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 2:
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(12, 14);
                  break;
               case 6:
                  if (curChar != 108)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 7:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(20, 22);
                  break;
               case 12:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 18:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(43, 44);
                  break;
               case 21:
                  if ((0x5000000050L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 23:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 92)
                     jjAddStates(45, 47);
                  break;
               case 26:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 32:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 33:
                  if (curChar == 92)
                     jjAddStates(48, 50);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(7, 9);
                  break;
               case 40:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar != 95)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(43);
                  break;
               case 44:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if (curChar != 95)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if (curChar != 95)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(49);
                  break;
               case 51:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(53);
                  break;
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(53);
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(51, 52);
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 66:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 69:
                  if (curChar == 95)
                     jjAddStates(41, 42);
                  break;
               case 70:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 71:
                  if ((0x7fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if (curChar != 95)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(73);
                  break;
               case 74:
                  if (curChar != 95)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(75);
                  break;
               case 75:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(75);
                  break;
               case 77:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 79:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(80);
                  break;
               case 80:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(80, 15);
                  break;
               case 82:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 83:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(83, 84);
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 86:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 89:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(90);
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(38, 40);
                  break;
               case 92:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjAddStates(12, 14);
                  break;
               case 7:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(20, 22);
                  break;
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(7, 9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 95 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1e000L) != 0L)
         {
            jjmatchedKind = 101;
            return 5;
         }
         if ((active0 & 0x1ffffe1f00L) != 0L)
         {
            jjmatchedKind = 101;
            return 47;
         }
         if ((active0 & 0x80000000000L) != 0L || (active1 & 0x2000L) != 0L)
            return 11;
         return -1;
      case 1:
         if ((active0 & 0x189c000L) != 0L)
            return 47;
         if ((active0 & 0x1ffe763f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 101;
               jjmatchedPos = 1;
            }
            return 47;
         }
         return -1;
      case 2:
         if ((active0 & 0x402200000L) != 0L)
            return 47;
         if ((active0 & 0x1bfc5fbf00L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 2;
            return 47;
         }
         return -1;
      case 3:
         if ((active0 & 0x10701d3300L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 3;
            return 47;
         }
         if ((active0 & 0xb8c428c00L) != 0L)
            return 47;
         return -1;
      case 4:
         if ((active0 & 0x50093100L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 4;
            return 47;
         }
         if ((active0 & 0x1020140200L) != 0L)
            return 47;
         return -1;
      case 5:
         if ((active0 & 0x50010000L) != 0L)
            return 47;
         if ((active0 & 0x83100L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 5;
            return 47;
         }
         return -1;
      case 6:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 6;
            return 47;
         }
         if ((active0 & 0x82100L) != 0L)
            return 47;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_1(0x20000000000000L, 0x0L);
      case 37:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x400L);
      case 38:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_1(0x80000000000000L, 0x80L);
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 42:
         jjmatchedKind = 60;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x20L);
      case 43:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_1(0x100000000000000L, 0x8L);
      case 44:
         return jjStopAtPos(0, 42);
      case 45:
         jjmatchedKind = 59;
         return jjMoveStringLiteralDfa1_1(0x200000000000000L, 0x10L);
      case 46:
         jjmatchedKind = 43;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x2000L);
      case 47:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x40L);
      case 58:
         return jjStopAtPos(0, 49);
      case 59:
         return jjStopAtPos(0, 41);
      case 60:
         jjmatchedKind = 45;
         return jjMoveStringLiteralDfa1_1(0x8000000000000L, 0x804L);
      case 61:
         jjmatchedKind = 44;
         return jjMoveStringLiteralDfa1_1(0x4000000000000L, 0x0L);
      case 62:
         return jjMoveStringLiteralDfa1_1(0x10000000000000L, 0x1000L);
      case 63:
         return jjStopAtPos(0, 48);
      case 64:
         return jjMoveStringLiteralDfa1_1(0x0L, 0x1fc000L);
      case 91:
         return jjStopAtPos(0, 5);
      case 93:
         return jjStopAtPos(0, 6);
      case 94:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_1(0x0L, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_1(0x300L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_1(0x1c00L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_1(0x1e000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_1(0x20000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_1(0x13c0000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_1(0x400000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_1(0x2800000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_1(0x4000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_1(0x8000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_1(0x10000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_1(0x60000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_1(0x780000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_1(0x800000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_1(0x1000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 39);
      case 124:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_1(0x40000000000000L, 0x100L);
      case 125:
         return jjStopAtPos(0, 40);
      case 126:
         return jjStopAtPos(0, 47);
      default :
         return jjMoveNfa_1(6, 0);
   }
}
private int jjMoveStringLiteralDfa1_1(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 37:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x20000L);
      case 38:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 55);
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x100000L);
      case 43:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(1, 56);
         break;
      case 45:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x2000L);
      case 58:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x88000L);
      case 60:
         if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x4800L);
      case 61:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStopAtPos(1, 51);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         else if ((active1 & 0x10L) != 0L)
            return jjStopAtPos(1, 68);
         else if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 62:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x1000L);
      case 83:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa2_1(active0, 0x40400L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_1(active0, 0x90002000L, active1, 0L);
      case 102:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_1(1, 23, 47);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_1(active0, 0x1120000800L, active1, 0L);
      case 105:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x80000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_1(active0, 0x120000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_1(active0, 0x2000000L, active1, 0L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_1(active0, 0x804619100L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_1(active0, 0x600000200L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_1(active0, 0x8000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_1(active0, 0x40000000L, active1, 0L);
      case 123:
         return jjMoveStringLiteralDfa2_1(active0, 0L, active1, 0x40000L);
      case 124:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      default :
         break;
   }
   return jjStartNfa_1(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(2, 77);
         break;
      case 58:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x64000L);
      case 61:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(2, 75);
         else if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(2, 76);
         break;
      case 62:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa3_1(active0, 0x800L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_1(active0, 0x100000200L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_1(active0, 0x2000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_1(active0, 0x1840000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_1(active0, 0x8040000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_1(active0, 0x4089000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_1(active0, 0x20100100L, active1, 0L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_1(2, 21, 47);
         break;
      case 115:
         return jjMoveStringLiteralDfa3_1(active0, 0x80020400L, active1, 0L);
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_1(2, 25, 47);
         return jjMoveStringLiteralDfa3_1(active0, 0x10400000L, active1, 0x100000L);
      case 117:
         return jjMoveStringLiteralDfa3_1(active0, 0x200010000L, active1, 0L);
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_1(2, 34, 47);
         break;
      case 124:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x10000L);
      case 125:
         return jjMoveStringLiteralDfa3_1(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_1(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 64:
         if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(3, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(3, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(3, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(3, 81);
         else if ((active1 & 0x40000L) != 0L)
            return jjStopAtPos(3, 82);
         else if ((active1 & 0x80000L) != 0L)
            return jjStopAtPos(3, 83);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(3, 84);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_1(active0, 0x182200L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000L, active1, 0L);
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_1(3, 35, 47);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_1(3, 10, 47);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_1(3, 15, 47);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_1(3, 17, 47);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_1(3, 33, 47);
         break;
      case 103:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_1(3, 26, 47);
         break;
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_1(3, 27, 47);
         return jjMoveStringLiteralDfa4_1(active0, 0x1000000100L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_1(3, 32, 47);
         break;
      case 111:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_1(3, 22, 47);
         break;
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_1(3, 11, 47);
         return jjMoveStringLiteralDfa4_1(active0, 0x20000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa4_1(active0, 0x40000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_1(3, 31, 47);
         return jjMoveStringLiteralDfa4_1(active0, 0x40001000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_1(active0, 0x10000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_1(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_1(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_1(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_1(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_1(4, 18, 47);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_1(4, 36, 47);
         return jjMoveStringLiteralDfa5_1(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa5_1(active0, 0x1000L);
      case 107:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_1(4, 9, 47);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_1(active0, 0x90000L);
      case 114:
         return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_1(4, 20, 47);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_1(4, 29, 47);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_1(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_1(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_1(active0, 0x100L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_1(5, 16, 47);
         break;
      case 104:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_1(5, 30, 47);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_1(active0, 0x82000L);
      case 110:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_1(5, 28, 47);
         return jjMoveStringLiteralDfa6_1(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_1(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_1(6, 8, 47);
         break;
      case 116:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_1(6, 13, 47);
         break;
      case 117:
         return jjMoveStringLiteralDfa7_1(active0, 0x1000L);
      case 121:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_1(6, 19, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_1(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_1(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_1(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_1(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_1(7, 12, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_1(6, active0, 0L);
}
private int jjStartNfaWithStates_1(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_1(state, pos + 1);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 89;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(47);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 69);
                  else if (curChar == 36)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(47);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(45, 47);
                  else if (curChar == 39)
                     jjAddStates(70, 71);
                  else if (curChar == 46)
                     jjCheckNAdd(11);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddTwoStates(8, 9);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 85)
                        kind = 85;
                     jjCheckNAddStates(72, 76);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(77, 79);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 7:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 10:
                  if (curChar == 46)
                     jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(80, 82);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(14, 15);
                  break;
               case 16:
                  if (curChar == 39)
                     jjAddStates(70, 71);
                  break;
               case 17:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if (curChar == 39 && kind > 94)
                     kind = 94;
                  break;
               case 20:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 21:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 18);
                  break;
               case 22:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 23:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(22);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(45, 47);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 28:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 29:
                  if (curChar == 34 && kind > 95)
                     kind = 95;
                  break;
               case 30:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(83, 86);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 32:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 46:
                  if (curChar != 36)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(47);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(63, 69);
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(87, 89);
                  break;
               case 51:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(52);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(52, 15);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 55:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(56, 15);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar != 46)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(90, 92);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddStates(90, 92);
                  break;
               case 61:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(62);
                  break;
               case 62:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(62, 15);
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 70:
                  if (curChar == 52)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if (curChar != 48)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddStates(72, 76);
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(74, 9);
                  break;
               case 75:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(75, 9);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 78:
                  if (curChar == 46)
                     jjCheckNAdd(79);
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(79, 80);
                  break;
               case 81:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(82);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(82, 15);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 85:
                  if (curChar == 46)
                     jjCheckNAdd(86);
                  break;
               case 87:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(88);
                  break;
               case 88:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  jjCheckNAddTwoStates(88, 15);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(47);
                  }
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     jjCheckNAdd(47);
                  }
                  if (curChar == 95)
                     jjAddStates(98, 99);
                  else if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  else if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 35;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 0:
                  if (curChar != 108)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(77, 79);
                  break;
               case 1:
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAddStates(77, 79);
                  break;
               case 9:
                  if ((0x100000001000L & l) != 0L && kind > 85)
                     kind = 85;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(100, 101);
                  break;
               case 15:
                  if ((0x5000000050L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 17:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 19:
                  if (curChar == 92)
                     jjAddStates(102, 104);
                  break;
               case 20:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(105, 107);
                  break;
               case 28:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 34:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if (curChar != 95)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(37);
                  break;
               case 37:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 97)
                     kind = 97;
                  jjCheckNAdd(37);
                  break;
               case 38:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7fffffe00000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if (curChar != 95)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(41);
                  break;
               case 41:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjCheckNAdd(41);
                  break;
               case 42:
                  if (curChar != 95)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 100)
                     kind = 100;
                  jjCheckNAdd(43);
                  break;
               case 45:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(47);
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  jjCheckNAdd(47);
                  break;
               case 50:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(108, 109);
                  break;
               case 54:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(110, 111);
                  break;
               case 60:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(53, 54);
                  break;
               case 63:
                  if (curChar == 95)
                     jjAddStates(98, 99);
                  break;
               case 64:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 65:
                  if ((0x7fffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 66:
                  if (curChar != 95)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(67);
                  break;
               case 67:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 96)
                     kind = 96;
                  jjCheckNAdd(67);
                  break;
               case 68:
                  if (curChar != 95)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(69);
                  break;
               case 69:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(69);
                  break;
               case 71:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 73:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(74);
                  break;
               case 74:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAddTwoStates(74, 9);
                  break;
               case 76:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 79:
                  if ((0x7e0000007eL & l) != 0L)
                     jjAddStates(112, 113);
                  break;
               case 80:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(114, 115);
                  break;
               case 83:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(95, 97);
                  break;
               case 86:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjAddStates(77, 79);
                  break;
               case 17:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(45, 47);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 89 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   55, 56, 21, 59, 60, 63, 64, 32, 33, 35, 23, 25, 2, 3, 5, 79, 
   81, 15, 82, 89, 7, 8, 10, 17, 18, 21, 32, 33, 37, 35, 55, 56, 
   21, 65, 66, 21, 83, 84, 90, 91, 92, 70, 77, 19, 20, 26, 27, 29, 
   34, 36, 38, 57, 58, 61, 62, 67, 68, 85, 86, 87, 88, 93, 94, 49, 
   50, 15, 53, 54, 57, 58, 17, 19, 73, 75, 9, 76, 83, 1, 2, 4, 
   11, 12, 15, 26, 27, 31, 29, 49, 50, 15, 59, 60, 15, 77, 78, 84, 
   85, 86, 64, 71, 13, 14, 20, 21, 23, 28, 30, 32, 51, 52, 55, 56, 
   79, 80, 81, 82, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, "\133", "\133", "\135", "\135", 
"\142\157\157\154\145\141\156", "\142\162\145\141\153", "\143\141\163\145", "\143\150\141\162", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\156\145", 
"\144\157\165\142\154\145", "\145\154\163\145", "\146\141\154\163\145", "\146\151\156\141\154\154\171", 
"\146\154\157\141\164", "\146\157\162", "\147\157\164\157", "\151\146", "\146\151", "\151\156\164", 
"\154\157\156\147", "\156\165\154\154", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\167\151\164\143\150", "\164\145\163\164", "\164\150\145\156", "\164\162\165\145", "\164\162\171", 
"\166\157\151\144", "\167\150\151\154\145", "\50", "\51", "\173", "\175", "\73", "\54", "\56", 
"\75", "\74", "\41", "\176", "\77", "\72", "\75\75", "\74\75", "\76\75", "\41\75", 
"\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", "\52", "\57", "\46", "\174", 
"\136", "\45", "\74\74", "\53\75", "\55\75", "\52\75", "\57\75", "\46\75", "\174\75", 
"\136\75", "\45\75", "\74\74\75", "\76\76\75", "\56\56\56", "\100\74\72\100", 
"\100\72\76\100", "\100\123\174\100", "\100\45\72\100", "\100\173\72\100", "\100\72\175\100", 
"\100\46\164\100", null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "MCOMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x23fc23fffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x10000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x10000000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[95];
private final int[] jjstateSet = new int[190];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public M4ParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public M4ParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 95; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 105)
       {
          jjmatchedKind = 105;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 104)
       {
          jjmatchedKind = 104;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
           }
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
    m4NestingDepth = 1;
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
    m4NestingDepth += 1;
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
    m4NestingDepth = 0;
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
