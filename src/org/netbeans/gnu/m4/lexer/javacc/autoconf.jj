/* 
 * Copyright (C) 2014, Enrico M. Crisostomo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  TOKEN_FACTORY = "Token";
  JDK_VERSION = "1.5";
  BUILD_PARSER = false;
}

PARSER_BEGIN(M4Parser)

package org.netbeans.gnu.m4.lexer.javacc;

public class M4Parser {}

PARSER_END(M4Parser)

/* White Space */

TOKEN :
{
  < WHITESPACE:
  " "
| "\t"
| "\n"
| "\r"
| "\f" >
}

/* Comments */

<DEFAULT>
TOKEN :
{
  <SINGLE_LINE_COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")?>
}

TOKEN_MGR_DECLS : {
  int m4NestingDepth ;
}

/* SEPARATORS */

<DEFAULT>
TOKEN : 
{
  < LBRACKET: "[" > { 
    m4NestingDepth = 1;
  } : MCOMMENT
}

<MCOMMENT>
TOKEN : 
{
  < MLBRACKET: "[" > {
    m4NestingDepth += 1; 
  }
}

<MCOMMENT>
TOKEN :
{
  < MRBRACKET: "]" > {
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
  }
}

<DEFAULT>
TOKEN :
{
  < RBRACKET: "]" > {
    m4NestingDepth = 0;
  }
}

/* Reserved words */

<*>
TOKEN :
{
  < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < CASE: "case" >
| < CHAR: "char" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DONE: "done" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < FALSE: "false" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < FI: "fi" >
| < INT: "int" >
| < LONG: "long" >
| < NULL: "null" >
| < RETURN: "return" >
| < SHORT: "short" >
| < SWITCH: "switch" >
| < TEST: "test" >
| < THEN: "then" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < WHILE: "while" >
}

/* Separators */

<*>
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* Operators */

<*>
TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < ELLIPSIS: "..." >
}

<*>
TOKEN :
{
  < LBRACKET_QG: "@<:@" >
| < RBRACKET_QG: "@:>@" >
| < DOLLAR_QG:   "@S|@" >
| < BANG_QG:     "@%:@" >
| < LBRACE_QG:   "@{:@" >
| < RBRACE_QG:   "@:}@" >
| < EMPTY_QG:    "@&t@" >
}

/* Literals */

<*>
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* Autoconf macros */

<*>
TOKEN :
{
  < AC_ARG_VAR: "AC_ARG_VAR" >
| < AC_ARG_ENABLE: "AC_ARG_ENABLE" >
| < AC_ARG_PROGRAM: "AC_ARG_PROGRAM" >
| < AC_ARG_WITH: "AC_ARG_WITH" >
| < AC_AUTOCONF_VERSION: "AC_AUTOCONF_VERSION" >
| < AC_BEFORE: "AC_BEFORE" >
| < AC_C_BACKSLASH_A: "AC_C_BACKSLASH_A" >
| < AC_C_BIGENDIAN: "AC_C_BIGENDIAN" >
| < AC_C_CHAR_UNSIGNED: "AC_C_CHAR_UNSIGNED" >
| < AC_C_CONST: "AC_C_CONST" >
| < AC_C_FLEXIBLE_ARRAY_MEMBER: "AC_C_FLEXIBLE_ARRAY_MEMBER" >
| < AC_C_INLINE: "AC_C_INLINE" >
| < AC_C_PROTOTYPES: "AC_C_PROTOTYPES" >
| < AC_C_RESTRICT: "AC_C_RESTRICT" >
| < AC_C_STRINGIZE: "AC_C_STRINGIZE" >
| < AC_C_TYPEOF: "AC_C_TYPEOF" >
| < AC_C_VARARRAYS: "AC_C_VARARRAYS" >
| < AC_C_VOLATILE: "AC_C_VOLATILE" >
| < AC_CACHE_CHECK: "AC_CACHE_CHECK" >
| < AC_CACHE_LOAD: "AC_CACHE_LOAD" >
| < AC_CACHE_SAVE: "AC_CACHE_SAVE" >
| < AC_CACHE_VAL: "AC_CACHE_VAL" >
| < AC_CANONICAL_BUILD: "AC_CANONICAL_BUILD" >
| < AC_CANONICAL_HOST: "AC_CANONICAL_HOST" >
| < AC_CANONICAL_TARGET: "AC_CANONICAL_TARGET" >
| < AC_CHECK_ALIGNOF: "AC_CHECK_ALIGNOF" >
| < AC_CHECK_DECL: "AC_CHECK_DECL" >
| < AC_CHECK_DECLS: "AC_CHECK_DECLS" >
| < AC_CHECK_DECLS_ONCE: "AC_CHECK_DECLS_ONCE" >
| < AC_CHECK_FILE: "AC_CHECK_FILE" >
| < AC_CHECK_FILES: "AC_CHECK_FILES" >
| < AC_CHECK_FUNC: "AC_CHECK_FUNC" >
| < AC_CHECK_FUNCS: "AC_CHECK_FUNCS" >
| < AC_CHECK_FUNCS_ONCE: "AC_CHECK_FUNCS_ONCE" >
| < AC_CHECK_LIB: "AC_CHECK_LIB" >
| < AC_CHECK_HEADER: "AC_CHECK_HEADER" >
| < AC_CHECK_HEADER_STDBOOL: "AC_CHECK_HEADER_STDBOOL" >
| < AC_CHECK_HEADERS: "AC_CHECK_HEADERS" >
| < AC_CHECK_HEADERS_ONCE: "AC_CHECK_HEADERS_ONCE" >
| < AC_CHECK_MEMBER: "AC_CHECK_MEMBER" >
| < AC_CHECK_MEMBERS: "AC_CHECK_MEMBERS" >
| < AC_CHECK_PROG: "AC_CHECK_PROG" >
| < AC_CHECK_PROGS: "AC_CHECK_PROGS" >
| < AC_CHECK_SIZEOF: "AC_CHECK_SIZEOF" >
| < AC_CHECK_TARGET_TOOL: "AC_CHECK_TARGET_TOOL" >
| < AC_CHECK_TARGET_TOOLS: "AC_CHECK_TARGET_TOOLS" >
| < AC_CHECK_TYPE: "AC_CHECK_TYPE" >
| < AC_CHECK_TYPES: "AC_CHECK_TYPES" >
| < AC_CHECK_TOOL: "AC_CHECK_TOOL" >
| < AC_CHECK_TOOLS: "AC_CHECK_TOOLS" >
| < AC_COMPILE_IFELSE: "AC_COMPILE_IFELSE" >
| < AC_COMPUTE_INT: "AC_COMPUTE_INT" >
| < AC_CONFIG_AUX_DIR: "AC_CONFIG_AUX_DIR" >
| < AC_CONFIG_COMMANDS: "AC_CONFIG_COMMANDS" >
| < AC_CONFIG_COMMANDS_PRE: "AC_CONFIG_COMMANDS_PRE" >
| < AC_CONFIG_COMMANDS_POST: "AC_CONFIG_COMMANDS_POST" >
| < AC_CONFIG_FILES: "AC_CONFIG_FILES" >
| < AC_CONFIG_LIBOBJ_DIR: "AC_CONFIG_LIBOBJ_DIR" >
| < AC_CONFIG_LINKS: "AC_CONFIG_LINKS" >
| < AC_CONFIG_MACRO_DIR: "AC_CONFIG_MACRO_DIR" >
| < AC_CONFIG_MACRO_DIRS: "AC_CONFIG_MACRO_DIRS" >
| < AC_CONFIG_SRCDIR: "AC_CONFIG_SRCDIR" >
| < AC_CONFIG_SUBDIRS: "AC_CONFIG_SUBDIRS" >
| < AC_COPYRIGHT: "AC_COPYRIGHT" >
| < AC_DEFINE: "AC_DEFINE" >
| < AC_DEFINE_UNQUOTED: "AC_DEFINE_UNQUOTED" >
| < AC_DEFUN: "AC_DEFUN" >
| < AC_DEFUN_ONCE: "AC_DEFUN_ONCE" >
| < AC_DIAGNOSE: "AC_DIAGNOSE" >
| < AC_DISABLE_OPTION_CHECKING: "AC_DISABLE_OPTION_CHECKING" >
| < AC_EGREP_CPP: "AC_EGREP_CPP" >
| < AC_EGREP_HEADER: "AC_EGREP_HEADER" >
| < AC_ERLANG_CHECK_LIB: "AC_ERLANG_CHECK_LIB" >
| < AC_ERLANG_NEED_ERL: "AC_ERLANG_NEED_ERL" >
| < AC_ERLANG_NEED_ERLC: "AC_ERLANG_NEED_ERLC" >
| < AC_ERLANG_PATH_ERL: "AC_ERLANG_PATH_ERL" >
| < AC_ERLANG_PATH_ERLC: "AC_ERLANG_PATH_ERLC" >
| < AC_ERLANG_SUBST_ERTS_VER: "AC_ERLANG_SUBST_ERTS_VER" >
| < AC_ERLANG_SUBST_INSTALL_LIB_DIR: "AC_ERLANG_SUBST_INSTALL_LIB_DIR" >
| < AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR: "AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR" >
| < AC_ERLANG_SUBST_LIB_DIR: "AC_ERLANG_SUBST_LIB_DIR" >
| < AC_ERLANG_SUBST_ROOT_DIR: "AC_ERLANG_SUBST_ROOT_DIR" >
| < AC_F77_DUMMY_MAIN: "AC_F77_DUMMY_MAIN" >
| < AC_F77_FUNC: "AC_F77_FUNC" >
| < AC_F77_IMPLICIT_NONE: "AC_F77_IMPLICIT_NONE" >
| < AC_F77_LIBRARY_LDFLAGS: "AC_F77_LIBRARY_LDFLAGS" >
| < AC_F77_MAIN: "AC_F77_MAIN" >
| < AC_F77_WRAPPERS: "AC_F77_WRAPPERS" >
| < AC_FATAL: "AC_FATAL" >
| < AC_FC_CHECK_BOUNDS: "AC_FC_CHECK_BOUNDS" >
| < AC_FC_DUMMY_MAIN: "AC_FC_DUMMY_MAIN" >
| < AC_FC_FIXEDFORM: "AC_FC_FIXEDFORM" >
| < AC_FC_FREEFORM: "AC_FC_FREEFORM" >
| < AC_FC_FUNC: "AC_FC_FUNC" >
| < AC_FC_IMPLICIT_NONE: "AC_FC_IMPLICIT_NONE" >
| < AC_FC_LIBRARY_LDFLAGS: "AC_FC_LIBRARY_LDFLAGS" >
| < AC_FC_LINE_LENGTH: "AC_FC_LINE_LENGTH" >
| < AC_FC_MAIN: "AC_FC_MAIN" >
| < AC_FC_MODULE_EXTENSION: "AC_FC_MODULE_EXTENSION" >
| < AC_FC_MODULE_FLAG: "AC_FC_MODULE_FLAG" >
| < AC_FC_MODULE_OUTPUT_FLAG: "AC_FC_MODULE_OUTPUT_FLAG" >
| < AC_FC_PP_DEFINE: "AC_FC_PP_DEFINE" >
| < AC_FC_PP_SRCEXT: "AC_FC_PP_SRCEXT" >
| < AC_FC_SRCEXT: "AC_FC_SRCEXT" >
| < AC_FC_WRAPPERS: "AC_FC_WRAPPERS" >
| < AC_FUNC_ALLOCA: "AC_FUNC_ALLOCA" >
| < AC_FUNC_CHOWN: "AC_FUNC_CHOWN" >
| < AC_FUNC_CLOSEDIR_VOID: "AC_FUNC_CLOSEDIR_VOID" >
| < AC_FUNC_ERROR_AT_LINE: "AC_FUNC_ERROR_AT_LINE" >
| < AC_FUNC_FNMATCH: "AC_FUNC_FNMATCH" >
| < AC_FUNC_FNMATCH_GNU: "AC_FUNC_FNMATCH_GNU" >
| < AC_FUNC_FORK: "AC_FUNC_FORK" >
| < AC_FUNC_FSEEKO: "AC_FUNC_FSEEKO" >
| < AC_FUNC_GETGROUPS: "AC_FUNC_GETGROUPS" >
| < AC_FUNC_GETLOADAVG: "AC_FUNC_GETLOADAVG" >
| < AC_FUNC_GETMNTENT: "AC_FUNC_GETMNTENT" >
| < AC_FUNC_GETPGRP: "AC_FUNC_GETPGRP" >
| < AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK: "AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK" >
| < AC_FUNC_MALLOC: "AC_FUNC_MALLOC" >
| < AC_FUNC_MBRTOWC: "AC_FUNC_MBRTOWC" >
| < AC_FUNC_MEMCMP: "AC_FUNC_MEMCMP" >
| < AC_FUNC_MKTIME: "AC_FUNC_MKTIME" >
| < AC_FUNC_MMAP: "AC_FUNC_MMAP" >
| < AC_FUNC_OBSTACK: "AC_FUNC_OBSTACK" >
| < AC_FUNC_REALLOC: "AC_FUNC_REALLOC" >
| < AC_FUNC_SELECT_ARGTYPES: "AC_FUNC_SELECT_ARGTYPES" >
| < AC_FUNC_SETPGRP: "AC_FUNC_SETPGRP" >
| < AC_FUNC_STAT: "AC_FUNC_STAT" >
| < AC_FUNC_LSTAT: "AC_FUNC_LSTAT" >
| < AC_FUNC_STRCOLL: "AC_FUNC_STRCOLL" >
| < AC_FUNC_STRERROR_R: "AC_FUNC_STRERROR_R" >
| < AC_FUNC_STRFTIME: "AC_FUNC_STRFTIME" >
| < AC_FUNC_STRTOD: "AC_FUNC_STRTOD" >
| < AC_FUNC_STRTOLD: "AC_FUNC_STRTOLD" >
| < AC_FUNC_STRNLEN: "AC_FUNC_STRNLEN" >
| < AC_FUNC_UTIME_NULL: "AC_FUNC_UTIME_NULL" >
| < AC_FUNC_VPRINTF: "AC_FUNC_VPRINTF" >
| < AC_HEADER_ASSERT: "AC_HEADER_ASSERT" >
| < AC_HEADER_DIRENT: "AC_HEADER_DIRENT" >
| < AC_HEADER_MAJOR: "AC_HEADER_MAJOR" >
| < AC_HEADER_RESOLV: "AC_HEADER_RESOLV" >
| < AC_HEADER_STAT: "AC_HEADER_STAT" >
| < AC_HEADER_STDBOOL: "AC_HEADER_STDBOOL" >
| < AC_HEADER_STDC: "AC_HEADER_STDC" >
| < AC_HEADER_SYS_WAIT: "AC_HEADER_SYS_WAIT" >
| < AC_HEADER_TIME: "AC_HEADER_TIME" >
| < AC_HEADER_TIOCGWINSZ: "AC_HEADER_TIOCGWINSZ" >
| < AC_INCLUDES_DEFAULT: "AC_INCLUDES_DEFAULT" >
| < AC_INIT: "AC_INIT" >
| < AC_LANG: "AC_LANG" >
| < AC_LANG_ASSERT: "AC_LANG_ASSERT" >
| < AC_LANG_CALL: "AC_LANG_CALL" >
| < AC_LANG_CONFTEST: "AC_LANG_CONFTEST" >
| < AC_LANG_DEFINES_PROVIDED: "AC_LANG_DEFINES_PROVIDED" >
| < AC_LANG_FUNC_LINK_TRY: "AC_LANG_FUNC_LINK_TRY" >
| < AC_LANG_POP: "AC_LANG_POP" >
| < AC_LANG_PROGRAM: "AC_LANG_PROGRAM" >
| < AC_LANG_PUSH: "AC_LANG_PUSH" >
| < AC_LANG_SOURCE: "AC_LANG_SOURCE" >
| < AC_LANG_WERROR: "AC_LANG_WERROR" >
| < AC_LIBOBJ: "AC_LIBOBJ" >
| < AC_LIBSOURCE: "AC_LIBSOURCE" >
| < AC_LIBSOURCES: "AC_LIBSOURCES" >
| < AC_LINK_IFELSE: "AC_LINK_IFELSE" >
| < AC_MSG_CHECKING: "AC_MSG_CHECKING" >
| < AC_MSG_ERROR: "AC_MSG_ERROR" >
| < AC_MSG_FAILURE: "AC_MSG_FAILURE" >
| < AC_MSG_NOTICE: "AC_MSG_NOTICE" >
| < AC_MSG_RESULT: "AC_MSG_RESULT" >
| < AC_MSG_WARN: "AC_MSG_WARN" >
| < AC_OPENMP: "AC_OPENMP" >
| < AC_OUTPUT: "AC_OUTPUT" >
| < AC_PACKAGE_BUGREPORT: "AC_PACKAGE_BUGREPORT" >
| < AC_PACKAGE_NAME: "AC_PACKAGE_NAME" >
| < AC_PACKAGE_STRING: "AC_PACKAGE_STRING" >
| < AC_PACKAGE_TARNAME: "AC_PACKAGE_TARNAME" >
| < AC_PACKAGE_URL: "AC_PACKAGE_URL" >
| < AC_PACKAGE_VERSION: "AC_PACKAGE_VERSION" >
| < AC_PATH_PROG: "AC_PATH_PROG" >
| < AC_PATH_PROGS: "AC_PATH_PROGS" >
| < AC_PATH_PROGS_FEATURE_CHECK: "AC_PATH_PROGS_FEATURE_CHECK" >
| < AC_PATH_TARGET_TOOL: "AC_PATH_TARGET_TOOL" >
| < AC_PATH_TOOL: "AC_PATH_TOOL" >
| < AC_PATH_X: "AC_PATH_X" >
| < AC_PATH_XTRA: "AC_PATH_XTRA" >
| < AC_PREFIX_DEFAULT: "AC_PREFIX_DEFAULT" >
| < AC_PREFIX_PROGRAM: "AC_PREFIX_PROGRAM" >
| < AC_PREPROC_IFELSE: "AC_PREPROC_IFELSE" >
| < AC_PREREQ: "AC_PREREQ" >
| < AC_PRESERVE_HELP_ORDER: "AC_PRESERVE_HELP_ORDER" >
| < AC_PROG_AWK: "AC_PROG_AWK" >
| < AC_PROG_CC: "AC_PROG_CC" >
| < AC_PROG_CC_C_O: "AC_PROG_CC_C_O" >
| < AC_PROG_CC_C89: "AC_PROG_CC_C89" >
| < AC_PROG_CC_C99: "AC_PROG_CC_C99" >
| < AC_PROG_CC_STDC: "AC_PROG_CC_STDC" >
| < AC_PROG_CPP: "AC_PROG_CPP" >
| < AC_PROG_CPP_WERROR: "AC_PROG_CPP_WERROR" >
| < AC_PROG_CXX: "AC_PROG_CXX" >
| < AC_PROG_CXX_C_O: "AC_PROG_CXX_C_O" >
| < AC_PROG_CXXCPP: "AC_PROG_CXXCPP" >
| < AC_PROG_EGREP: "AC_PROG_EGREP" >
| < AC_PROG_F77: "AC_PROG_F77" >
| < AC_PROG_F77_C_O: "AC_PROG_F77_C_O" >
| < AC_PROG_FC: "AC_PROG_FC" >
| < AC_PROG_FC_C_O: "AC_PROG_FC_C_O" >
| < AC_PROG_FGREP: "AC_PROG_FGREP" >
| < AC_PROG_GCC_TRADITIONAL: "AC_PROG_GCC_TRADITIONAL" >
| < AC_PROG_GO: "AC_PROG_GO" >
| < AC_PROG_GREP: "AC_PROG_GREP" >
| < AC_PROG_INSTALL: "AC_PROG_INSTALL" >
| < AC_PROG_LEX: "AC_PROG_LEX" >
| < AC_PROG_LN_S: "AC_PROG_LN_S" >
| < AC_PROG_MAKE_SET: "AC_PROG_MAKE_SET" >
| < AC_PROG_MKDIR_P: "AC_PROG_MKDIR_P" >
| < AC_PROG_OBJC: "AC_PROG_OBJC" >
| < AC_PROG_OBJCPP: "AC_PROG_OBJCPP" >
| < AC_PROG_OBJCXX: "AC_PROG_OBJCXX" >
| < AC_PROG_OBJCXXCPP: "AC_PROG_OBJCXXCPP" >
| < AC_PROG_RANLIB: "AC_PROG_RANLIB" >
| < AC_PROG_SED: "AC_PROG_SED" >
| < AC_PROG_YACC: "AC_PROG_YACC" >
| < AC_REPLACE_FNMATCH: "AC_REPLACE_FNMATCH" >
| < AC_REPLACE_FUNCS: "AC_REPLACE_FUNCS" >
| < AC_REQUIRE: "AC_REQUIRE" >
| < AC_REQUIRE_AUX_FILE: "AC_REQUIRE_AUX_FILE" >
| < AC_REQUIRE_CPP: "AC_REQUIRE_CPP" >
| < AC_REVISION: "AC_REVISION" >
| < AC_RUN_IFELSE: "AC_RUN_IFELSE" >
| < AC_SEARCH_LIBS: "AC_SEARCH_LIBS" >
| < AC_STRUCT_DIRENT_D_INO: "AC_STRUCT_DIRENT_D_INO" >
| < AC_STRUCT_DIRENT_D_TYPE: "AC_STRUCT_DIRENT_D_TYPE" >
| < AC_STRUCT_ST_BLOCKS: "AC_STRUCT_ST_BLOCKS" >
| < AC_STRUCT_TM: "AC_STRUCT_TM" >
| < AC_STRUCT_TIMEZONE: "AC_STRUCT_TIMEZONE" >
| < AC_SUBST: "AC_SUBST" >
| < AC_SUBST_FILE: "AC_SUBST_FILE" >
| < AC_SYS_INTERPRETER: "AC_SYS_INTERPRETER" >
| < AC_SYS_LARGEFILE: "AC_SYS_LARGEFILE" >
| < AC_SYS_LONG_FILE_NAMES: "AC_SYS_LONG_FILE_NAMES" >
| < AC_SYS_POSIX_TERMIOS: "AC_SYS_POSIX_TERMIOS" >
| < AC_TYPE_GETGROUPS: "AC_TYPE_GETGROUPS" >
| < AC_TYPE_INT8_T: "AC_TYPE_INT8_T" >
| < AC_TYPE_INT16_T: "AC_TYPE_INT16_T" >
| < AC_TYPE_INT32_T: "AC_TYPE_INT32_T" >
| < AC_TYPE_INT64_T: "AC_TYPE_INT64_T" >
| < AC_TYPE_INTMAX_T: "AC_TYPE_INTMAX_T" >
| < AC_TYPE_INTPTR_T: "AC_TYPE_INTPTR_T" >
| < AC_TYPE_LONG_DOUBLE: "AC_TYPE_LONG_DOUBLE" >
| < AC_TYPE_LONG_DOUBLE_WIDER: "AC_TYPE_LONG_DOUBLE_WIDER" >
| < AC_TYPE_LONG_LONG_INT: "AC_TYPE_LONG_LONG_INT" >
| < AC_TYPE_MBSTATE_T: "AC_TYPE_MBSTATE_T" >
| < AC_TYPE_MODE_T: "AC_TYPE_MODE_T" >
| < AC_TYPE_OFF_T: "AC_TYPE_OFF_T" >
| < AC_TYPE_PID_T: "AC_TYPE_PID_T" >
| < AC_TYPE_SIZE_T: "AC_TYPE_SIZE_T" >
| < AC_TYPE_SSIZE_T: "AC_TYPE_SSIZE_T" >
| < AC_TYPE_UID_T: "AC_TYPE_UID_T" >
| < AC_TYPE_UINT8_T: "AC_TYPE_UINT8_T" >
| < AC_TYPE_UINT16_T: "AC_TYPE_UINT16_T" >
| < AC_TYPE_UINT32_T: "AC_TYPE_UINT32_T" >
| < AC_TYPE_UINT64_T: "AC_TYPE_UINT64_T" >
| < AC_TYPE_UINTMAX_T: "AC_TYPE_UINTMAX_T" >
| < AC_TYPE_UINTPTR_T: "AC_TYPE_UINTPTR_T" >
| < AC_TYPE_UNSIGNED_LONG_LONG_INT: "AC_TYPE_UNSIGNED_LONG_LONG_INT" >
| < AC_USE_SYSTEM_EXTENSIONS: "AC_USE_SYSTEM_EXTENSIONS" >
| < AC_WARNING: "AC_WARNING" >
}

/* Autoconf obsolete macros */

<*>
TOKEN :
{
  < AC_AIX: "AC_AIX" >
| < AC_ALLOCA: "AC_ALLOCA" >
| < AC_ARG_ARRAY: "AC_ARG_ARRAY" >
| < AC_C_CROSS: "AC_C_CROSS" >
| < AC_C_LONG_DOUBLE: "AC_C_LONG_DOUBLE" >
| < AC_CANONICAL_SYSTEM: "AC_CANONICAL_SYSTEM" >
| < AC_CHAR_UNSIGNED: "AC_CHAR_UNSIGNED" >
| < AC_CHECKING: "AC_CHECKING" >
| < AC_COMPILE_CHECK: "AC_COMPILE_CHECK" >
| < AC_CONFIG_HEADERS: "AC_CONFIG_HEADERS" >
| < AC_CONST: "AC_CONST" >
| < AC_CROSS_CHECK: "AC_CROSS_CHECK" >
| < AC_CYGWIN: "AC_CYGWIN" >
| < AC_DECL_SYS_SIGLIST: "AC_DECL_SYS_SIGLIST" >
| < AC_DECL_YYTEXT: "AC_DECL_YYTEXT" >
| < AC_DIR_HEADER: "AC_DIR_HEADER" >
| < AC_DYNIX_SEQ: "AC_DYNIX_SEQ" >
| < AC_EXEEXT: "AC_EXEEXT" >
| < AC_EMXOS2: "AC_EMXOS2" >
| < AC_ENABLE: "AC_ENABLE" >
| < AC_ERROR: "AC_ERROR" >
| < AC_FIND_X: "AC_FIND_X" >
| < AC_FIND_XTRA: "AC_FIND_XTRA" >
| < AC_FOREACH: "AC_FOREACH" >
| < AC_FUNC_CHECK: "AC_FUNC_CHECK" >
| < AC_FUNC_SETVBUF_REVERSED: "AC_FUNC_SETVBUF_REVERSED" >
| < AC_FUNC_WAIT3: "AC_FUNC_WAIT3" >
| < AC_GCC_TRADITIONAL: "AC_GCC_TRADITIONAL" >
| < AC_GETGROUPS_T: "AC_GETGROUPS_T" >
| < AC_GETLOADAVG: "AC_GETLOADAVG" >
| < AC_GNU_SOURCE: "AC_GNU_SOURCE" >
| < AC_HAVE_FUNCS: "AC_HAVE_FUNCS" >
| < AC_HAVE_HEADERS: "AC_HAVE_HEADERS" >
| < AC_HAVE_LIBRARY: "AC_HAVE_LIBRARY" >
| < AC_HAVE_POUNDBANG: "AC_HAVE_POUNDBANG" >
| < AC_HEADER_CHECK: "AC_HEADER_CHECK" >
| < AC_HEADER_EGREP: "AC_HEADER_EGREP" >
| < AC_HELP_STRING: "AC_HELP_STRING" >
| < AC_INLINE: "AC_INLINE" >
| < AC_INT_16_BITS: "AC_INT_16_BITS" >
| < AC_IRIX_SUN: "AC_IRIX_SUN" >
| < AC_ISC_POSIX: "AC_ISC_POSIX" >
| < AC_LANG_C: "AC_LANG_C" >
| < AC_LANG_CPLUSPLUS: "AC_LANG_CPLUSPLUS" >
| < AC_LANG_FORTRAN77: "AC_LANG_FORTRAN77" >
| < AC_LANG_RESTORE: "AC_LANG_RESTORE" >
| < AC_LANG_SAVE: "AC_LANG_SAVE" >
| < AC_LINK_FILES: "AC_LINK_FILES" >
| < AC_LN_S: "AC_LN_S" >
| < AC_LONG_64_BITS: "AC_LONG_64_BITS" >
| < AC_LONG_DOUBLE: "AC_LONG_DOUBLE" >
| < AC_LONG_FILE_NAMES: "AC_LONG_FILE_NAMES" >
| < AC_MAJOR_HEADER: "AC_MAJOR_HEADER" >
| < AC_MEMORY_H: "AC_MEMORY_H" >
| < AC_MINGW32: "AC_MINGW32" >
| < AC_MINIX: "AC_MINIX" >
| < AC_MINUS_C_MINUS_O: "AC_MINUS_C_MINUS_O" >
| < AC_MMAP: "AC_MMAP" >
| < AC_MODE_T: "AC_MODE_T" >
| < AC_OBJEXT: "AC_OBJEXT" >
| < AC_OBSOLETE: "AC_OBSOLETE" >
| < AC_OFF_T: "AC_OFF_T" >
| < AC_OUTPUT_COMMANDS: "AC_OUTPUT_COMMANDS" >
| < AC_PID_T: "AC_PID_T" >
| < AC_PREFIX: "AC_PREFIX" >
| < AC_PROGRAMS_CHECK: "AC_PROGRAMS_CHECK" >
| < AC_PROGRAMS_PATH: "AC_PROGRAMS_PATH" >
| < AC_PROGRAM_CHECK: "AC_PROGRAM_CHECK" >
| < AC_PROGRAM_EGREP: "AC_PROGRAM_EGREP" >
| < AC_PROGRAM_PATH: "AC_PROGRAM_PATH" >
| < AC_REMOTE_TAPE: "AC_REMOTE_TAPE" >
| < AC_RESTARTABLE_SYSCALLS: "AC_RESTARTABLE_SYSCALLS" >
| < AC_RETSIGTYPE: "AC_RETSIGTYPE" >
| < AC_RSH: "AC_RSH" >
| < AC_SCO_INTL: "AC_SCO_INTL" >
| < AC_SETVBUF_REVERSED: "AC_SETVBUF_REVERSED" >
| < AC_SET_MAKE: "AC_SET_MAKE" >
| < AC_SIZEOF_TYPE: "AC_SIZEOF_TYPE" >
| < AC_SIZE_T: "AC_SIZE_T" >
| < AC_STAT_MACROS_BROKEN: "AC_STAT_MACROS_BROKEN" >
| < AC_STDC_HEADERS: "AC_STDC_HEADERS" >
| < AC_STRCOLL: "AC_STRCOLL" >
| < AC_STRUCT_ST_BLKSIZE: "AC_STRUCT_ST_BLKSIZE" >
| < AC_STRUCT_ST_RDEV: "AC_STRUCT_ST_RDEV" >
| < AC_ST_BLKSIZE: "AC_ST_BLKSIZE" >
| < AC_ST_BLOCKS: "AC_ST_BLOCKS" >
| < AC_ST_RDEV: "AC_ST_RDEV" >
| < AC_SYS_RESTARTABLE_SYSCALLS: "AC_SYS_RESTARTABLE_SYSCALLS" >
| < AC_SYS_SIGLIST_DECLARED: "AC_SYS_SIGLIST_DECLARED" >
| < AC_TEST_CPP: "AC_TEST_CPP" >
| < AC_TEST_PROGRAM: "AC_TEST_PROGRAM" >
| < AC_TIMEZONE: "AC_TIMEZONE" >
| < AC_TIME_WITH_SYS_TIME: "AC_TIME_WITH_SYS_TIME" >
| < AC_TRY_COMPILE: "AC_TRY_COMPILE" >
| < AC_TRY_CPP: "AC_TRY_CPP" >
| < AC_TRY_LINK: "AC_TRY_LINK" >
| < AC_TRY_LINK_FUNC: "AC_TRY_LINK_FUNC" >
| < AC_TRY_RUN: "AC_TRY_RUN" >
| < AC_TYPE_SIGNAL: "AC_TYPE_SIGNAL" >
| < AC_UID_T: "AC_UID_T" >
| < AC_UNISTD_H: "AC_UNISTD_H" >
| < AC_USG: "AC_USG" >
| < AC_UTIME_NULL: "AC_UTIME_NULL" >
| < AC_VALIDATE_CACHED_SYSTEM_TUPLE: "AC_VALIDATE_CACHED_SYSTEM_TUPLE" >
| < AC_VERBOSE: "AC_VERBOSE" >
| < AC_VFORK: "AC_VFORK" >
| < AC_VPRINTF: "AC_VPRINTF" >
| < AC_WAIT3: "AC_WAIT3" >
| < AC_WARN: "AC_WARN" >
| < AC_WITH: "AC_WITH" >
| < AC_WORDS_BIGENDIAN: "AC_WORDS_BIGENDIAN" >
| < AC_XENIX_DIR: "AC_XENIX_DIR" >
| < AC_YYTEXT_POINTER: "AC_YYTEXT_POINTER" >
}

/* Autoconf AH macros */

<*>
TOKEN :
{
  < AH_BOTTOM: "AH_BOTTOM" >
| < AH_HEADER: "AH_HEADER" >
| < AH_TEMPLATE: "AH_TEMPLATE" >
| < AH_TOP: "AH_TOP" >
| < AH_VERBATIM: "AH_VERBATIM" >
}

/* Automake AM macros */

<*>
TOKEN :
{
  < AM_INIT_AUTOMAKE: "AM_INIT_AUTOMAKE" >
| < AM_CONDITIONAL: "AM_CONDITIONAL" >
| < AM_PATH_LISPDIR: "AM_PATH_LISPDIR" >
| < AM_PROG_AR: "AM_PROG_AR" >
| < AM_PROG_AS: "AM_PROG_AS" >
| < AM_PROG_CC_C_O: "AM_PROG_CC_C_O" >
| < AM_PROG_LEX: "AM_PROG_LEX" >
| < AM_PROG_GCJ: "AM_PROG_GCJ" >
| < AM_PROG_UPC: "AM_PROG_UPC" >
| < AM_MISSING_PROG: "AM_MISSING_PROG" >
| < AM_SILENT_RULES: "AM_SILENT_RULES" >
| < AM_WITH_DMALLOC: "AM_WITH_DMALLOC" >
}

/* Automake AM obsolete macros */
<*>
TOKEN :
{
  < AM_PROG_MKDIR_P: "AM_PROG_MKDIR_P" >
}

/* m4sh macros */

<*>
TOKEN :
{
  < AS_BOURNE_COMPATIBLE: "AS_BOURNE_COMPATIBLE" >
| < AS_BOX: "AS_BOX" >
| < AS_CASE: "AS_CASE" >
| < AS_DIRNAME: "AS_DIRNAME" >
| < AS_ECHO: "AS_ECHO" >
| < AS_ECHO_N: "AS_ECHO_N" >
| < AS_ESCAPE: "AS_ESCAPE" >
| < AS_EXECUTABLE_P: "AS_EXECUTABLE_P" >
| < AS_EXIT: "AS_EXIT" >
| < AS_HELP_STRING: "AS_HELP_STRING" >
| < AS_IF: "AS_IF" >
| < AS_INIT: "AS_INIT" >
| < AS_INIT_GENERATED: "AS_INIT_GENERATED" >
| < AS_LINENO_PREPARE: "AS_LINENO_PREPARE" >
| < AS_LITERAL_IF: "AS_LITERAL_IF" >
| < AS_LITERAL_WORD_IF: "AS_LITERAL_WORD_IF" >
| < AS_ME_PREPARE: "AS_ME_PREPARE" >
| < AS_MESSAGE_FD: "AS_MESSAGE_FD" >
| < AS_MESSAGE_LOG_FD: "AS_MESSAGE_LOG_FD" >
| < AS_MKDIR_P: "AS_MKDIR_P" >
| < AS_ORIGINAL_STDIN_FD: "AS_ORIGINAL_STDIN_FD" >
| < AS_SET_CATFILE: "AS_SET_CATFILE" >
| < AS_SET_STATUS: "AS_SET_STATUS" >
| < AS_SHELL_SANITIZE: "AS_SHELL_SANITIZE" >
| < AS_TMPDIR: "AS_TMPDIR" >
| < AS_TR_CPP: "AS_TR_CPP" >
| < AS_TR_SH: "AS_TR_SH" >
| < AS_UNSET: "AS_UNSET" >
| < AS_VAR_APPEND: "AS_VAR_APPEND" >
| < AS_VAR_ARITH: "AS_VAR_ARITH" >
| < AS_VAR_COPY: "AS_VAR_COPY" >
| < AS_VAR_IF: "AS_VAR_IF" >
| < AS_VAR_POPDEF: "AS_VAR_POPDEF" >
| < AS_VAR_PUSHDEF: "AS_VAR_PUSHDEF" >
| < AS_VAR_SET: "AS_VAR_SET" >
| < AS_VAR_SET_IF: "AS_VAR_SET_IF" >
| < AS_VAR_TEST_SET: "AS_VAR_TEST_SET" >
| < AS_VERSION_COMPARE: "AS_VERSION_COMPARE" >
}

<*>
TOKEN :
{
  < AU_ALIAS: "AU_ALIAS" >
| < AU_DEFUN: "AU_DEFUN" >
}

/* Autoconf AC_* macro */

<*>
TOKEN :
{
  < AC_MACRO_PRIVATE: "_AC_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AC_MACRO:         "AC_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AC_VARIABLE:      "ac_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AH_* macro */

<*>
TOKEN :
{
  < AH_MACRO_PRIVATE: "_AH_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AH_MACRO:         "AH_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AH_VARIABLE:      "ah_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AM_* macro */

<*>
TOKEN :
{
  < AM_MACRO_PRIVATE: "_AM_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AM_MACRO:         "AM_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AM_VARIABLE:      "am_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AN_* macro */

<*>
TOKEN :
{
  < AN_MACRO_PRIVATE: "_AN_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AN_MACRO:         "AN_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AN_VARIABLE:      "an_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* m4sh AS_* macros */

<*>
TOKEN :
{
  < AS_MACRO_PRIVATE: "_AS_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AS_MACRO:         "AS_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AS_VARIABLE:      "as_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AU_* macro */

<*>
TOKEN :
{
  < AU_MACRO_PRIVATE: "_AU_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AU_MACRO:         "AU_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AU_VARIABLE:      "au_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Autoconf AX_* macro */

<*>
TOKEN :
{
  < AX_MACRO_PRIVATE: "_AX_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AX_MACRO:         "AX_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < AX_VARIABLE:      "ax_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Unknown macro type */

<*>
TOKEN :
{
  < UNKNOWN_MACRO_PRIVATE: "_A"(["A"-"Z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < UNKNOWN_MACRO:         "A"(["A"-"Z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < UNKNOWN_VARIABLE:      "a"(["a"-"z"])"_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* Generic M4 m4_* macro */

<*>
TOKEN :
{
  < MF_MACRO_PRIVATE: "_m4_"(["0"-"9","a"-"z","A"-"Z","_"])* >
| < MF_MACRO:         "m4_"(["0"-"9","a"-"z","A"-"Z","_"])* >
}

/* IDENTIFIERS */

<*>
TOKEN :
{
  < IDENTIFIER: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
    [  
      "$",
      "A"-"Z",
      "_",
      "a"-"z"
     ]
  >
|
  < #PART_LETTER:
    [  
      "$",
      "0"-"9",
      "A"-"Z",
      "_",
      "a"-"z"
    ]
  >
}

<MCOMMENT>
SPECIAL_TOKEN : 
{
  < ~[] > 
}

<DEFAULT>
TOKEN :
{
  <TEXT: ~[]>
}
