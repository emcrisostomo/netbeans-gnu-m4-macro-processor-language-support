/* 
 * Copyright (C) 2014, Enrico M. Crisostomo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
options {
  JAVA_UNICODE_ESCAPE = true;
  ERROR_REPORTING = false;
  STATIC = false;
  COMMON_TOKEN_ACTION = false;
  TOKEN_FACTORY = "Token";
  JDK_VERSION = "1.5";
  BUILD_PARSER = false;
}

PARSER_BEGIN(M4Parser)

package org.netbeans.gnu.m4.lexer.javacc;

public class M4Parser {}

PARSER_END(M4Parser)

/* White Space */

TOKEN :
{
  < WHITESPACE:
  " "
| "\t"
| "\n"
| "\r"
| "\f" >
}

/* Comments */

<DEFAULT>
TOKEN :
{
  < SINGLE_LINE_COMMENT: "#" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

<*>
TOKEN : 
{
  < DNL_COMMENT: "dnl" (~["\n", "\r"])* ("\n" | "\r" | "\r\n")? >
}

TOKEN_MGR_DECLS : {
  int m4NestingDepth;
}

/* Quotes */

<DEFAULT>
TOKEN : 
{
  < LBRACKET: "[" > { 
    m4NestingDepth = 1;
  } : MCOMMENT
}

<MCOMMENT>
TOKEN : 
{
  < MLBRACKET: "[" > {
    m4NestingDepth += 1; 
  }
}

<MCOMMENT>
TOKEN :
{
  < MRBRACKET: "]" > {
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
  }
}

<DEFAULT>
TOKEN :
{
  < RBRACKET: "]" > {
    m4NestingDepth = 0;
  }
}

<DEFAULT>
TOKEN :
{
  < LQUOTE: "`" > {
    m4NestingDepth = 1;
  } : MCOMMENT
}

<MCOMMENT>
TOKEN :
{
  < MQLQUOTE: "`" > {
    m4NestingDepth += 1; 
  }
}

<MCOMMENT>
TOKEN :
{
  < MQRQUOTE: "'" > {
    if (m4NestingDepth == 1)
    {
      SwitchTo( DEFAULT );
    }
    m4NestingDepth -= 1;
  }
}

<DEFAULT>
TOKEN :
{
  < RQUOTE: "'" > {
    m4NestingDepth = 0;
  }
}

/* Separators */

<*>
TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* Operators */

<*>
TOKEN :
{
  < ASSIGN: "=" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < ELLIPSIS: "..." >
}

<*>
TOKEN :
{
  < LBRACKET_QG: "@<:@" >
| < RBRACKET_QG: "@:>@" >
| < DOLLAR_QG:   "@S|@" >
| < BANG_QG:     "@%:@" >
| < LBRACE_QG:   "@{:@" >
| < RBRACE_QG:   "@:}@" >
| < EMPTY_QG:    "@&t@" >
}

/* M4 Macros */

<DEFAULT>
TOKEN :
{
  < M4_MACRO: <MACRO_NAME> >
| < #MACRO_NAME: ["A"-"Z","a"-"z","_"] (["0"-"9","a"-"z","A"-"Z","_"])* >
}

<*>
TOKEN :
{
  < M4_MACRO_INVOCATION: <MACRO_NAME>"(" >
}

/* Literals */

<DEFAULT>
TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

<MCOMMENT>
TOKEN :
{
  < QUOTED_TEXT: ~[] >
}

<*>
TOKEN :
{
  < TEXT: ~[] >
}
