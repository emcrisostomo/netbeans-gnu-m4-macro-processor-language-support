/* 
 * Copyright (C) 2014, Enrico M. Crisostomo
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.netbeans.gnu.m4.lexer;

import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.netbeans.gnu.m4.lexer.javacc.M4ParserConstants;
import org.netbeans.spi.lexer.LanguageHierarchy;
import org.netbeans.spi.lexer.Lexer;
import org.netbeans.spi.lexer.LexerRestartInfo;

/**
 *
 * @author Enrico M. Crisostomo
 */
public class M4LanguageHierarchy extends LanguageHierarchy<M4TokenId> {

    private static List<M4TokenId> tokens;
    private static Map<Integer, M4TokenId> idToToken;

    private static void init() {
        int regExCounter = 0;
        tokens = Arrays.asList(new M4TokenId[]{
            // whitespace and comments
            new M4TokenId("EOF", "whitespace", regExCounter++),
            new M4TokenId("WHITESPACE", "whitespace", regExCounter++),
            new M4TokenId("SINGLE_LINE_COMMENT", "comment", regExCounter++),
            new M4TokenId("DNL_COMMENT", "comment", regExCounter++),
            // Operators
            new M4TokenId("LBRACKET", "operator", regExCounter++),
            new M4TokenId("MLBRACKET", "operator", regExCounter++),
            new M4TokenId("MRBRACKET", "operator", regExCounter++),
            new M4TokenId("RBRACKET", "operator", regExCounter++),
            // Reserved words
            new M4TokenId("BOOLEAN", "keyword", regExCounter++),
            new M4TokenId("BREAK", "keyword", regExCounter++),
            new M4TokenId("CASE", "keyword", regExCounter++),
            new M4TokenId("CHAR", "keyword", regExCounter++),
            new M4TokenId("CONTINUE", "keyword", regExCounter++),
            new M4TokenId("_DEFAULT", "keyword", regExCounter++),
            new M4TokenId("DO", "keyword", regExCounter++),
            new M4TokenId("DONE", "keyword", regExCounter++),
            new M4TokenId("DOUBLE", "keyword", regExCounter++),
            new M4TokenId("ELSE", "keyword", regExCounter++),
            new M4TokenId("FALSE", "keyword", regExCounter++),
            new M4TokenId("FINALLY", "keyword", regExCounter++),
            new M4TokenId("FLOAT", "keyword", regExCounter++),
            new M4TokenId("FOR", "keyword", regExCounter++),
            new M4TokenId("GOTO", "keyword", regExCounter++),
            new M4TokenId("IF", "keyword", regExCounter++),
            new M4TokenId("FI", "keyword", regExCounter++),
            new M4TokenId("INT", "keyword", regExCounter++),
            new M4TokenId("LONG", "keyword", regExCounter++),
            new M4TokenId("NULL", "keyword", regExCounter++),
            new M4TokenId("RETURN", "keyword", regExCounter++),
            new M4TokenId("SHORT", "keyword", regExCounter++),
            new M4TokenId("SWITCH", "keyword", regExCounter++),
            new M4TokenId("TEST", "keyword", regExCounter++),
            new M4TokenId("THEN", "keyword", regExCounter++),
            new M4TokenId("TRUE", "keyword", regExCounter++),
            new M4TokenId("TRY", "keyword", regExCounter++),
            new M4TokenId("VOID", "keyword", regExCounter++),
            new M4TokenId("WHILE", "keyword", regExCounter++),
            // Separators
            new M4TokenId("LPAREN", "operator", regExCounter++),
            new M4TokenId("RPAREN", "operator", regExCounter++),
            new M4TokenId("LBRACE", "operator", regExCounter++),
            new M4TokenId("RBRACE", "operator", regExCounter++),
            new M4TokenId("SEMICOLON", "operator", regExCounter++),
            new M4TokenId("COMMA", "operator", regExCounter++),
            new M4TokenId("DOT", "operator", regExCounter++),
            // Operators  
            new M4TokenId("ASSIGN", "operator", regExCounter++),
            new M4TokenId("LT", "operator", regExCounter++),
            new M4TokenId("BANG", "operator", regExCounter++),
            new M4TokenId("TILDE", "operator", regExCounter++),
            new M4TokenId("HOOK", "operator", regExCounter++),
            new M4TokenId("COLON", "operator", regExCounter++),
            new M4TokenId("EQ", "operator", regExCounter++),
            new M4TokenId("LE", "operator", regExCounter++),
            new M4TokenId("GE", "operator", regExCounter++),
            new M4TokenId("NE", "operator", regExCounter++),
            new M4TokenId("SC_OR", "operator", regExCounter++),
            new M4TokenId("SC_AND", "operator", regExCounter++),
            new M4TokenId("INCR", "operator", regExCounter++),
            new M4TokenId("DECR", "operator", regExCounter++),
            new M4TokenId("PLUS", "operator", regExCounter++),
            new M4TokenId("MINUS", "operator", regExCounter++),
            new M4TokenId("STAR", "operator", regExCounter++),
            new M4TokenId("SLASH", "operator", regExCounter++),
            new M4TokenId("BIT_AND", "operator", regExCounter++),
            new M4TokenId("BIT_OR", "operator", regExCounter++),
            new M4TokenId("XOR", "operator", regExCounter++),
            new M4TokenId("REM", "operator", regExCounter++),
            new M4TokenId("LSHIFT", "operator", regExCounter++),
            new M4TokenId("PLUSASSIGN", "operator", regExCounter++),
            new M4TokenId("MINUSASSIGN", "operator", regExCounter++),
            new M4TokenId("STARASSIGN", "operator", regExCounter++),
            new M4TokenId("SLASHASSIGN", "operator", regExCounter++),
            new M4TokenId("ANDASSIGN", "operator", regExCounter++),
            new M4TokenId("ORASSIGN", "operator", regExCounter++),
            new M4TokenId("XORASSIGN", "operator", regExCounter++),
            new M4TokenId("REMASSIGN", "operator", regExCounter++),
            new M4TokenId("LSHIFTASSIGN", "operator", regExCounter++),
            new M4TokenId("RSIGNEDSHIFTASSIGN", "operator", regExCounter++),
            new M4TokenId("ELLIPSIS", "operator", regExCounter++),
            // Quadrigraphs
            new M4TokenId("LBRACKET_QG", "operator", regExCounter++),
            new M4TokenId("RBRACKET_QG", "operator", regExCounter++),
            new M4TokenId("DOLLAR_QG", "operator", regExCounter++),
            new M4TokenId("BANG_QG", "operator", regExCounter++),
            new M4TokenId("LBRACE_QG", "operator", regExCounter++),
            new M4TokenId("RBRACE_QG", "operator", regExCounter++),
            new M4TokenId("EMPTY_QG", "operator", regExCounter++),
            //  Literals
            new M4TokenId("INTEGER_LITERAL", "number", regExCounter++),
            new M4TokenId("DECIMAL_LITERAL", "number", regExCounter++),
            new M4TokenId("HEX_LITERAL", "number", regExCounter++),
            new M4TokenId("OCTAL_LITERAL", "number", regExCounter++),
            new M4TokenId("FLOATING_POINT_LITERAL", "number", regExCounter++),
            new M4TokenId("DECIMAL_FLOATING_POINT_LITERAL", "number", regExCounter++),
            new M4TokenId("DECIMAL_EXPONENT", "number", regExCounter++),
            new M4TokenId("HEXADECIMAL_FLOATING_POINT_LITERAL", "number", regExCounter++),
            new M4TokenId("HEXADECIMAL_EXPONENT", "number", regExCounter++),
            new M4TokenId("CHARACTER_LITERAL", "character", regExCounter++),
            new M4TokenId("STRING_LITERAL", "string", regExCounter++),
            // Autoconf macros
            new M4TokenId("AC_ARG_VAR", "autoconf", regExCounter++),
            new M4TokenId("AC_ARG_ENABLE", "autoconf", regExCounter++),
            new M4TokenId("AC_ARG_PROGRAM", "autoconf", regExCounter++),
            new M4TokenId("AC_ARG_WITH", "autoconf", regExCounter++),
            new M4TokenId("AC_AUTOCONF_VERSION", "autoconf", regExCounter++),
            new M4TokenId("AC_BEFORE", "autoconf", regExCounter++),
            new M4TokenId("AC_C_BACKSLASH_A", "autoconf", regExCounter++),
            new M4TokenId("AC_C_BIGENDIAN", "autoconf", regExCounter++),
            new M4TokenId("AC_C_CHAR_UNSIGNED", "autoconf", regExCounter++),
            new M4TokenId("AC_C_CONST", "autoconf", regExCounter++),
            new M4TokenId("AC_C_FLEXIBLE_ARRAY_MEMBER", "autoconf", regExCounter++),
            new M4TokenId("AC_C_INLINE", "autoconf", regExCounter++),
            new M4TokenId("AC_C_PROTOTYPES", "autoconf", regExCounter++),
            new M4TokenId("AC_C_RESTRICT", "autoconf", regExCounter++),
            new M4TokenId("AC_C_STRINGIZE", "autoconf", regExCounter++),
            new M4TokenId("AC_C_TYPEOF", "autoconf", regExCounter++),
            new M4TokenId("AC_C_VARARRAYS", "autoconf", regExCounter++),
            new M4TokenId("AC_C_VOLATILE", "autoconf", regExCounter++),
            new M4TokenId("AC_CACHE_CHECK", "autoconf", regExCounter++),
            new M4TokenId("AC_CACHE_LOAD", "autoconf", regExCounter++),
            new M4TokenId("AC_CACHE_SAVE", "autoconf", regExCounter++),
            new M4TokenId("AC_CACHE_VAL", "autoconf", regExCounter++),
            new M4TokenId("AC_CANONICAL_BUILD", "autoconf", regExCounter++),
            new M4TokenId("AC_CANONICAL_HOST", "autoconf", regExCounter++),
            new M4TokenId("AC_CANONICAL_TARGET", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_ALIGNOF", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_DECL", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_DECLS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_DECLS_ONCE", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_FILE", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_FILES", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_FUNC", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_FUNCS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_FUNCS_ONCE", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_LIB", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_HEADER", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_HEADER_STDBOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_HEADERS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_HEADERS_ONCE", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_MEMBER", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_MEMBERS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_PROG", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_PROGS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_SIZEOF", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TARGET_TOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TARGET_TOOLS", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TYPE", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TYPES", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_CHECK_TOOLS", "autoconf", regExCounter++),
            new M4TokenId("AC_COMPILE_IFELSE", "autoconf", regExCounter++),
            new M4TokenId("AC_COMPUTE_INT", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_AUX_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_COMMANDS", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_COMMANDS_PRE", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_COMMANDS_POST", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_FILES", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_LIBOBJ_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_LINKS", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_MACRO_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_MACRO_DIRS", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_SRCDIR", "autoconf", regExCounter++),
            new M4TokenId("AC_CONFIG_SUBDIRS", "autoconf", regExCounter++),
            new M4TokenId("AC_COPYRIGHT", "autoconf", regExCounter++),
            new M4TokenId("AC_DEFINE", "autoconf", regExCounter++),
            new M4TokenId("AC_DEFINE_UNQUOTED", "autoconf", regExCounter++),
            new M4TokenId("AC_DEFUN", "autoconf", regExCounter++),
            new M4TokenId("AC_DEFUN_ONCE", "autoconf", regExCounter++),
            new M4TokenId("AC_DIAGNOSE", "autoconf", regExCounter++),
            new M4TokenId("AC_DISABLE_OPTION_CHECKING", "autoconf", regExCounter++),
            new M4TokenId("AC_EGREP_CPP", "autoconf", regExCounter++),
            new M4TokenId("AC_EGREP_HEADER", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_CHECK_LIB", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_NEED_ERL", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_NEED_ERLC", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_PATH_ERL", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_PATH_ERLC", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_SUBST_ERTS_VER", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_SUBST_INSTALL_LIB_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_SUBST_INSTALL_LIB_SUBDIR", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_SUBST_LIB_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_ERLANG_SUBST_ROOT_DIR", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_DUMMY_MAIN", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_FUNC", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_IMPLICIT_NONE", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_LIBRARY_LDFLAGS", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_MAIN", "autoconf", regExCounter++),
            new M4TokenId("AC_F77_WRAPPERS", "autoconf", regExCounter++),
            new M4TokenId("AC_FATAL", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_CHECK_BOUNDS", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_DUMMY_MAIN", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_FIXEDFORM", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_FREEFORM", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_FUNC", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_IMPLICIT_NONE", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_LIBRARY_LDFLAGS", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_LINE_LENGTH", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_MAIN", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_MODULE_EXTENSION", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_MODULE_FLAG", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_MODULE_OUTPUT_FLAG", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_PP_DEFINE", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_PP_SRCEXT", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_SRCEXT", "autoconf", regExCounter++),
            new M4TokenId("AC_FC_WRAPPERS", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_ALLOCA", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_CHOWN", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_CLOSEDIR_VOID", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_ERROR_AT_LINE", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_FNMATCH", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_FNMATCH_GNU", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_FORK", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_FSEEKO", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_GETGROUPS", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_GETLOADAVG", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_GETMNTENT", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_GETPGRP", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_LSTAT_FOLLOWS_SLASHED_SYMLINK", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_MALLOC", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_MBRTOWC", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_MEMCMP", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_MKTIME", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_MMAP", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_OBSTACK", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_REALLOC", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_SELECT_ARGTYPES", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_SETPGRP", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STAT", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_LSTAT", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRCOLL", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRERROR_R", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRFTIME", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRTOD", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRTOLD", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_STRNLEN", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_UTIME_NULL", "autoconf", regExCounter++),
            new M4TokenId("AC_FUNC_VPRINTF", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_ASSERT", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_DIRENT", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_MAJOR", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_RESOLV", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_STAT", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_STDBOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_STDC", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_SYS_WAIT", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_TIME", "autoconf", regExCounter++),
            new M4TokenId("AC_HEADER_TIOCGWINSZ", "autoconf", regExCounter++),
            new M4TokenId("AC_INCLUDES_DEFAULT", "autoconf", regExCounter++),
            new M4TokenId("AC_INIT", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_ASSERT", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_CALL", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_CONFTEST", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_DEFINES_PROVIDED", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_FUNC_LINK_TRY", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_POP", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_PROGRAM", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_PUSH", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_SOURCE", "autoconf", regExCounter++),
            new M4TokenId("AC_LANG_WERROR", "autoconf", regExCounter++),
            new M4TokenId("AC_LIBOBJ", "autoconf", regExCounter++),
            new M4TokenId("AC_LIBSOURCE", "autoconf", regExCounter++),
            new M4TokenId("AC_LIBSOURCES", "autoconf", regExCounter++),
            new M4TokenId("AC_LINK_IFELSE", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_CHECKING", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_ERROR", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_FAILURE", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_NOTICE", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_RESULT", "autoconf", regExCounter++),
            new M4TokenId("AC_MSG_WARN", "autoconf", regExCounter++),
            new M4TokenId("AC_OPENMP", "autoconf", regExCounter++),
            new M4TokenId("AC_OUTPUT", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_BUGREPORT", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_NAME", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_STRING", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_TARNAME", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_URL", "autoconf", regExCounter++),
            new M4TokenId("AC_PACKAGE_VERSION", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_PROG", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_PROGS", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_PROGS_FEATURE_CHECK", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_TARGET_TOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_TOOL", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_X", "autoconf", regExCounter++),
            new M4TokenId("AC_PATH_XTRA", "autoconf", regExCounter++),
            new M4TokenId("AC_PREFIX_DEFAULT", "autoconf", regExCounter++),
            new M4TokenId("AC_PREFIX_PROGRAM", "autoconf", regExCounter++),
            new M4TokenId("AC_PREPROC_IFELSE", "autoconf", regExCounter++),
            new M4TokenId("AC_PREREQ", "autoconf", regExCounter++),
            new M4TokenId("AC_PRESERVE_HELP_ORDER", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_AWK", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CC", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CC_C_O", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CC_C89", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CC_C99", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CC_STDC", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CPP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CPP_WERROR", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CXX", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CXX_C_O", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_CXXCPP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_EGREP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_F77", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_F77_C_O", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_FC", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_FC_C_O", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_FGREP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_GCC_TRADITIONAL", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_GO", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_GREP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_INSTALL", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_LEX", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_LN_S", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_MAKE_SET", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_MKDIR_P", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_OBJC", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_OBJCPP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_OBJCXX", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_OBJCXXCPP", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_RANLIB", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_SED", "autoconf", regExCounter++),
            new M4TokenId("AC_PROG_YACC", "autoconf", regExCounter++),
            new M4TokenId("AC_REPLACE_FNMATCH", "autoconf", regExCounter++),
            new M4TokenId("AC_REPLACE_FUNCS", "autoconf", regExCounter++),
            new M4TokenId("AC_REQUIRE", "autoconf", regExCounter++),
            new M4TokenId("AC_REQUIRE_AUX_FILE", "autoconf", regExCounter++),
            new M4TokenId("AC_REQUIRE_CPP", "autoconf", regExCounter++),
            new M4TokenId("AC_REVISION", "autoconf", regExCounter++),
            new M4TokenId("AC_RUN_IFELSE", "autoconf", regExCounter++),
            new M4TokenId("AC_SEARCH_LIBS", "autoconf", regExCounter++),
            new M4TokenId("AC_STRUCT_DIRENT_D_INO", "autoconf", regExCounter++),
            new M4TokenId("AC_STRUCT_DIRENT_D_TYPE", "autoconf", regExCounter++),
            new M4TokenId("AC_STRUCT_ST_BLOCKS", "autoconf", regExCounter++),
            new M4TokenId("AC_STRUCT_TM", "autoconf", regExCounter++),
            new M4TokenId("AC_STRUCT_TIMEZONE", "autoconf", regExCounter++),
            new M4TokenId("AC_SUBST", "autoconf", regExCounter++),
            new M4TokenId("AC_SUBST_FILE", "autoconf", regExCounter++),
            new M4TokenId("AC_SYS_INTERPRETER", "autoconf", regExCounter++),
            new M4TokenId("AC_SYS_LARGEFILE", "autoconf", regExCounter++),
            new M4TokenId("AC_SYS_LONG_FILE_NAMES", "autoconf", regExCounter++),
            new M4TokenId("AC_SYS_POSIX_TERMIOS", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_GETGROUPS", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INT8_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INT16_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INT32_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INT64_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INTMAX_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_INTPTR_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_LONG_DOUBLE", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_LONG_DOUBLE_WIDER", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_LONG_LONG_INT", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_MBSTATE_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_MODE_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_OFF_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_PID_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_SIZE_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_SSIZE_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UID_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINT8_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINT16_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINT32_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINT64_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINTMAX_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UINTPTR_T", "autoconf", regExCounter++),
            new M4TokenId("AC_TYPE_UNSIGNED_LONG_LONG_INT", "autoconf", regExCounter++),
            new M4TokenId("AC_USE_SYSTEM_EXTENSIONS", "autoconf", regExCounter++),
            new M4TokenId("AC_WARNING", "autoconf", regExCounter++),
            // Autoconf obsolete macros
            new M4TokenId("AC_AIX", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ALLOCA", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ARG_ARRAY", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_C_CROSS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_C_LONG_DOUBLE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CANONICAL_SYSTEM", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CHAR_UNSIGNED", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CHECKING", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_COMPILE_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CONFIG_HEADERS", "autoconf", regExCounter++),
            new M4TokenId("AC_CONST", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CROSS_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_CYGWIN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_DECL_SYS_SIGLIST", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_DECL_YYTEXT", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_DIR_HEADER", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_DYNIX_SEQ", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_EXEEXT", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_EMXOS2", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ENABLE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ERROR", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FIND_X", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FIND_XTRA", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FOREACH", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FUNC_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FUNC_SETVBUF_REVERSED", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_FUNC_WAIT3", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_GCC_TRADITIONAL", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_GETGROUPS_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_GETLOADAVG", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_GNU_SOURCE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HAVE_FUNCS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HAVE_HEADERS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HAVE_LIBRARY", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HAVE_POUNDBANG", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HEADER_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HEADER_EGREP", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_HELP_STRING", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_INLINE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_INT_16_BITS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_IRIX_SUN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ISC_POSIX", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LANG_C", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LANG_CPLUSPLUS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LANG_FORTRAN77", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LANG_RESTORE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LANG_SAVE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LINK_FILES", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LN_S", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LONG_64_BITS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LONG_DOUBLE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_LONG_FILE_NAMES", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MAJOR_HEADER", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MEMORY_H", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MINGW32", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MINIX", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MINUS_C_MINUS_O", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MMAP", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_MODE_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_OBJEXT", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_OBSOLETE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_OFF_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_OUTPUT_COMMANDS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PID_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PREFIX", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PROGRAMS_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PROGRAMS_PATH", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PROGRAM_CHECK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PROGRAM_EGREP", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_PROGRAM_PATH", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_REMOTE_TAPE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_RESTARTABLE_SYSCALLS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_RETSIGTYPE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_RSH", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SCO_INTL", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SETVBUF_REVERSED", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SET_MAKE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SIZEOF_TYPE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SIZE_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_STAT_MACROS_BROKEN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_STDC_HEADERS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_STRCOLL", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_STRUCT_ST_BLKSIZE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_STRUCT_ST_RDEV", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ST_BLKSIZE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ST_BLOCKS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_ST_RDEV", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SYS_RESTARTABLE_SYSCALLS", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_SYS_SIGLIST_DECLARED", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TEST_CPP", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TEST_PROGRAM", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TIMEZONE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TIME_WITH_SYS_TIME", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TRY_COMPILE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TRY_CPP", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TRY_LINK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TRY_LINK_FUNC", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TRY_RUN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_TYPE_SIGNAL", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_UID_T", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_UNISTD_H", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_USG", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_UTIME_NULL", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_VALIDATE_CACHED_SYSTEM_TUPLE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_VERBOSE", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_VFORK", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_VPRINTF", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_WAIT3", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_WARN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_WITH", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_WORDS_BIGENDIAN", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_XENIX_DIR", "autoconf-obsolete", regExCounter++),
            new M4TokenId("AC_YYTEXT_POINTER", "autoconf-obsolete", regExCounter++),
            // Autoconf AH macros
            new M4TokenId("AH_BOTTOM", "autoconf-ah-keyword", regExCounter++),
            new M4TokenId("AH_HEADER", "autoconf-ah-keyword", regExCounter++),
            new M4TokenId("AH_TEMPLATE", "autoconf-ah-keyword", regExCounter++),
            new M4TokenId("AH_TOP", "autoconf-ah-keyword", regExCounter++),
            new M4TokenId("AH_VERBATIM", "autoconf-ah-keyword", regExCounter++),
            // Autoconf AM macros
            new M4TokenId("AM_INIT_AUTOMAKE", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_CONDITIONAL", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PATH_LISPDIR", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_AR", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_AS", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_CC_C_O", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_LEX", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_GCJ", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_PROG_UPC", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_MISSING_PROG", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_SILENT_RULES", "autoconf-am-keyword", regExCounter++),
            new M4TokenId("AM_WITH_DMALLOC", "autoconf-am-keyword", regExCounter++),
            // Autoconf AM obsolete macros
            new M4TokenId("AM_PROG_MKDIR_P", "autoconf-am-obsolete-keyword", regExCounter++),
            // m4sh macros
            new M4TokenId("AS_BOURNE_COMPATIBLE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_BOX", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_CASE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_DIRNAME", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_ECHO", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_ECHO_N", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_ESCAPE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_EXECUTABLE_P", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_EXIT", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_HELP_STRING", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_IF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_INIT", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_INIT_GENERATED", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_LINENO_PREPARE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_LITERAL_IF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_LITERAL_WORD_IF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_ME_PREPARE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_MESSAGE_FD", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_MESSAGE_LOG_FD", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_MKDIR_P", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_ORIGINAL_STDIN_FD", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_SET_CATFILE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_SET_STATUS", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_SHELL_SANITIZE", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_TMPDIR", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_TR_CPP", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_TR_SH", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_UNSET", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_APPEND", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_ARITH", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_COPY", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_IF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_POPDEF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_PUSHDEF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_SET", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_SET_IF", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VAR_TEST_SET", "autoconf-as-keyword", regExCounter++),
            new M4TokenId("AS_VERSION_COMPARE", "autoconf-as-keyword", regExCounter++),
            // Autoconf AU macros
            new M4TokenId("AU_ALIAS", "autoconf-au-keyword", regExCounter++),
            new M4TokenId("AU_DEFUN", "autoconf-au-keyword", regExCounter++),
            // Autoconf AC_* macro
            new M4TokenId("AC_MACRO_PRIVATE", "autoconf-ac-generic-keyword", regExCounter++),
            new M4TokenId("AC_MACRO", "autoconf-ac-generic-keyword", regExCounter++),
            new M4TokenId("AC_VARIABLE", "autoconf-ac-generic-keyword", regExCounter++),
            // Autoconf AH_* macro
            new M4TokenId("AH_MACRO_PRIVATE", "autoconf-ah-generic-keyword", regExCounter++),
            new M4TokenId("AH_MACRO", "autoconf-ah-generic-keyword", regExCounter++),
            new M4TokenId("AH_VARIABLE", "autoconf-ah-generic-keyword", regExCounter++),
            // Autoconf AM_* macro
            new M4TokenId("AM_MACRO_PRIVATE", "autoconf-am-generic-keyword", regExCounter++),
            new M4TokenId("AM_MACRO", "autoconf-am-generic-keyword", regExCounter++),
            new M4TokenId("AM_VARIABLE", "autoconf-am-generic-keyword", regExCounter++),
            // Autoconf AN_* macro
            new M4TokenId("AN_MACRO_PRIVATE", "autoconf-an-generic-keyword", regExCounter++),
            new M4TokenId("AN_MACRO", "autoconf-an-generic-keyword", regExCounter++),
            new M4TokenId("AN_VARIABLE", "autoconf-an-generic-keyword", regExCounter++),
            // Autoconf AS_* macro
            new M4TokenId("AS_MACRO_PRIVATE", "autoconf-as-generic-keyword", regExCounter++),
            new M4TokenId("AS_MACRO", "autoconf-as-generic-keyword", regExCounter++),
            new M4TokenId("AS_VARIABLE", "autoconf-as-generic-keyword", regExCounter++),
            // Autoconf AU_* macro
            new M4TokenId("AU_MACRO_PRIVATE", "autoconf-au-generic-keyword", regExCounter++),
            new M4TokenId("AU_MACRO", "autoconf-au-generic-keyword", regExCounter++),
            new M4TokenId("AU_VARIABLE", "autoconf-au-generic-keyword", regExCounter++),
            // Autoconf AX_* macro
            new M4TokenId("AX_MACRO_PRIVATE", "autoconf-ax-generic-keyword", regExCounter++),
            new M4TokenId("AX_MACRO", "autoconf-ax-generic-keyword", regExCounter++),
            new M4TokenId("AX_VARIABLE", "autoconf-ax-generic-keyword", regExCounter++),
            // Unknown macro type
            new M4TokenId("UNKNOWN_MACRO_PRIVATE", "unknown-keyword", regExCounter++),
            new M4TokenId("UNKNOWN_MACRO", "unknown-keyword", regExCounter++),
            new M4TokenId("UNKNOWN_VARIABLE", "unknown-keyword", regExCounter++),
            // m4 macro type
            new M4TokenId("MF_MACRO_PRIVATE", "m4-keyword", regExCounter++),
            new M4TokenId("MF_MACRO", "m4-keyword", regExCounter++),
            // Identifiers
            new M4TokenId("IDENTIFIER", "identifier", regExCounter++),
            new M4TokenId("LETTER", "identifier", regExCounter++),
            new M4TokenId("PART_LETTER", "identifier", regExCounter++),
            // Text
            new M4TokenId("TEXT", "text", M4ParserConstants.TEXT)
        });

        idToToken = new HashMap<Integer, M4TokenId>();

        for (M4TokenId token : tokens) {
            idToToken.put(token.ordinal(), token);
        }
    }

    static synchronized M4TokenId getToken(int id) {
        if (idToToken == null) {
            init();
        }

        return idToToken.get(id);
    }

    @Override
    protected Collection<M4TokenId> createTokenIds() {
        if (tokens == null) {
            init();
        }

        return tokens;
    }

    @Override
    protected Lexer<M4TokenId> createLexer(LexerRestartInfo<M4TokenId> info) {
        return new M4Lexer(info);
    }

    @Override
    protected String mimeType() {
        return "text/x-m4";
    }
}